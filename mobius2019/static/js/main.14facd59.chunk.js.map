{"version":3,"sources":["redux/create-reducer.ts","redux/create-do-actions.ts","redux/full-screen/full-screen-state.ts","app/route-states.ts","redux/full-screen/full-screen-reducer.ts","redux/routing/routing-state.ts","redux/routing/routing-reducer.ts","utils/storage.ts","redux/questions/questions-state.ts","utils/extend-state.ts","redux/questions/questions-reducer.ts","utils/file.ts","redux/users/users-state.ts","redux/users/users-reducer.ts","redux/do-actions.ts","app/index.ts","app/app.ts","components/AppHeader/AppHeader.tsx","components/Landing/Landing.tsx","utils/text.ts","components/FileExport/FileExport.tsx","components/FileImport/FileImport.tsx","components/AdminMenu/AdminMenu.tsx","utils/placeholders.ts","components/QuestionEdit/QuestionEdit.tsx","utils/clone-question.ts","components/QuestionsManagement/QuestionsManagement.tsx","components/RegistrationForm/RegistrationForm.tsx","utils/get-new-user.ts","utils/handle-text-categories.ts","components/Quest/Quest.tsx","components/Routing/Routing.tsx","components/App/App.tsx","redux/root-reducer.ts","redux/state.ts","index.tsx","redux/store.ts"],"names":["createReducer","reducerObj","initialState","state","action","actionType","type","reducer","createDoActions","_len","arguments","length","actionsNamesList","Array","_key","reduce","memo","actionName","store","payload","dispatch","ROUTE_STATES","fullScreenInitialState","inFullscreen","fullScreenActions","fullScreenReducer","TOGGLE","routeInitialState","route","MAIN","routingActions","routingReducer","GO_TO","StorageValue","key","undefined","Object","classCallCheck","this","value","serializedValue","JSON","stringify","window","localStorage","setItem","defaultValue","defaultValueToUse","getItem","parse","e","console","error","concat","storage","questions","users","adminPass","questionsInitialState","restore","currentQuestionId","extendState","toAddOrKey","toAdd","defineProperty","objectSpread","FILE_TYPES","questionsActions","questionsReducer","ADD","question","id","toConsumableArray","DELETE","questionToDelete","map","UPDATE","questionToUpdate","resetIsFirst","isFirst","GO_TO_QUESTION","REPLACE","usersInitialState","currentUser","registrationUser","currentCategories","usersActions","usersReducer","HANDLE_CATEGORIES","split","category","trim","filter","Boolean","forEach","log","CLEAR_CATEGORIES","CLEAR_REG_USER","REG_USER","ADD_OR_UPDATE","rawUser","newUser","keys","userKey","newValue","categories","sameUserIndex","findIndex","user","phone","hasSameUser","newUsersList","push","doActions","fullScreen","routing","app","App","_store","storeUnsubscriber","storedQuestions","storedUsers","createClass","_this","unsubscribeStore","subscribe","getState","storeQuestions","storeUsers","QUEST","answer","questionId","lastQuestionId","qs","storedAdminPassHash","prompt","adminPassHash","md5","alert","goToRoute","ADMIN_MAIN","stateQuestions","stateUsers","get","sf","AppHeaderComponent","toggleState","toggleFullscreen","_this2","_this$props","props","className","isFullScreen","mainRouteState","conditionalClasses","AppHeader_small","react_default","a","createElement","classnames","onClick","toggleFullScreen","on","off","_this3","toggle","catch","React","Component","AppHeader","connect","Landing","restartGame","goToAdmin","padStart","item","strLength","symbol","mimeTypes","CSV","getFileObject","params","releaseFileObject","fileObjectUrl","charset","mimeType","fileType","data","Blob","content","URL","createObjectURL","revokeObjectURL","getFileName","section","extension","timestamp","now","Date","y","getFullYear","m","getMonth","d","getDate","H","getHours","M","getMinutes","S","getSeconds","getTimestamp","FileExport","fileName","buttonText","_this$state","prepareFile","href","download","releaseStateFileObject","fileDescription","getFileDescription","setState","stringifyContent","nameSection","toLowerCase","FileImport","onChange","event","onFileSelected","files","target","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","readFileAsString","then","_this3$props","parseJson","onContentRead","name","AdminMenu","_ref","ADMIN_QUESTIONS_LIST","FileImport_FileImport","updateQuestions","FileExport_FileExport","placeholdersInfo","<%reg%>","<%login%>","<%br%>","placeholders","reg","login","br","handlePlaceholders","text","join","handleLogin","handleBr","QuestionEdit","_React$Component","_getPrototypeOf2","args","possibleConstructorReturn","getPrototypeOf","call","apply","isNew","hideTextError","inherits","hasAnswers","answers","isFinal","tooManyReg","mainHtmlId","textHtmlId","isFirstHtmlId","randomTextHtmlId","rootId","getRootId","react","onSubmit","checked","updateQuestionProp","htmlFor","placeholder","randomLineText","answerOrNull","index","answerHtmlId","answerGotoHtmlId","answerInputHtmlId","answerWrongInputGotoHtmlId","answerRandomLineHtmlId","answerCategoriesHtmlId","updateAnswerProp","deleteAnswer","randomLine","needUserInput","incorrectUserInputNextQuestion","parseInt","nextQuestion","addAnswer","onDelete","propName","propValue","originalAnswer","updatedAnswer","preventDefault","onSave","answerIndex","stateAnswers","newAnswer","propQuestion","stateQuestion","QuestionsManagement","QuestionEdit_QuestionEdit_QuestionEdit","addQuestion","updateQuestion","deleteQuestion","RegistrationFormComponent","firstName","lastName","mainId","firstNameId","lastNameId","phoneId","loginId","maxLength","updateUser","userProp","registerUser","RegistrationForm","handleTextCategories","line","replaceCategory","startsWith","matches","match","matchStr","catName","catValue","condition","isNaN","currentCatValue","restLine","slice","QuestComponent","userInput","currentQuestion","regUser","hideAnswers","includes","renderQuestionText","renderAnswer","handleSelectedAnswer","texts","Math","floor","random","processQAText","expectedValue","textParts","RegistrationForm_RegistrationForm","Quest","Routing","Quest_Quest","QuestionsManagement_QuestionsManagement","AdminMenu_AdminMenu","Landing_Landing","_header_small","_quest-in-progress","AppHeader_AppHeader","rootReducer","combineReducers","createStore","setStore","appElement","es","App_App_App","document","title","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.14facd59.chunk.js","sourcesContent":["import { Reducer } from 'redux'\nimport { IAction } from './store';\n\n\n// { actionName: (state, action) => state }\nexport type IReducerObj<TState, TActionsToPayloads> = {\n    [K in keyof TActionsToPayloads]: Reducer<TState, IAction<TActionsToPayloads[K]>>\n}\n\n\nexport function createReducer<TActionsToPayload, TState>\n        (reducerObj: IReducerObj<TState, TActionsToPayload>, initialState: TState)\n{\n    return (state: TState | undefined, action: IAction<any>) => {\n        if (!state) {\n            return initialState;\n        }\n\n        const actionType: keyof TActionsToPayload = action.type as keyof TActionsToPayload;\n        const reducer = (reducerObj as any)[actionType] as Reducer<TState, IAction<any>>;\n        if (reducer) {\n            return reducer(state!, action) as TState;\n        }\n        return state!;\n    };\n}\n","import { IAppStore } from './store';\n\n\ntype IDoActionsWithPayload<TActionsToPayload> = {\n    [K in keyof TActionsToPayload]: (store: IAppStore | null, payload: TActionsToPayload[K]) => void;\n}\n\n\nexport function createDoActions<TActionsToPayload>(...actionsNamesList: Array<keyof TActionsToPayload>): IDoActionsWithPayload<TActionsToPayload> {\n    return actionsNamesList.reduce((memo, actionName) => {\n        memo[actionName] = (store, payload) => {\n            if (!store) {\n                return;\n            }\n\n            store.dispatch({\n                type: actionName as string,\n                payload\n            });\n        };\n        return memo;\n    }, {} as IDoActionsWithPayload<TActionsToPayload>);\n}\n","export interface IFullScreenState {\n    inFullscreen: boolean\n};\n\n\nexport const fullScreenInitialState: IFullScreenState = {\n    inFullscreen: false\n};\n","export enum ROUTE_STATES {\n    MAIN = 'MAIN',\n    ADMIN_MAIN = 'ADMIN_MAIN',\n    ADMIN_QUESTIONS_LIST = 'ADMIN_QUESTIONS_LIST',\n    QUEST = 'QUEST',\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IFullScreenState, fullScreenInitialState } from './full-screen-state';\n\n\nexport interface IFullScreenActionsToPayloads {\n    TOGGLE: void\n}\n\n\nexport const fullScreenActions = createDoActions<IFullScreenActionsToPayloads>('TOGGLE');\n\n\nconst reducerObj: IReducerObj<IFullScreenState, IFullScreenActionsToPayloads> = {\n    'TOGGLE': (state) => ({\n        inFullscreen: !state!.inFullscreen\n    }),\n};\n\n\nexport const fullScreenReducer = createReducer(reducerObj, fullScreenInitialState);\n","import { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingState {\n    route: ROUTE_STATES;\n};\n\n\nexport const routeInitialState: IRoutingState = {\n    route: ROUTE_STATES.MAIN\n};\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IRoutingState, routeInitialState } from './routing-state';\nimport { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingActionsToPayloads {\n    GO_TO: ROUTE_STATES;\n}\n\n\nexport const routingActions = createDoActions<IRoutingActionsToPayloads>('GO_TO');\n\n\nconst reducerObj: IReducerObj<IRoutingState, IRoutingActionsToPayloads> = {\n    'GO_TO': (state, action) => ({\n        route: action.payload\n    }),\n};\n\n\nexport const routingReducer = createReducer(reducerObj, routeInitialState);\n","import { IQuestionsList } from '../models/qa';\nimport { IUser } from '../models/user';\n\n\nclass StorageValue<T> {\n\n    constructor(private key = '') {\n    }\n\n\n    store(value: T) {\n        const serializedValue = JSON.stringify(value);\n        window.localStorage.setItem(this.key, serializedValue);\n    }\n\n\n    restore(defaultValue?: T): T | null {\n        const defaultValueToUse = defaultValue || null;\n        const serializedValue = window.localStorage.getItem(this.key);\n        if (!serializedValue) {\n            return defaultValueToUse;\n        }\n        try {\n            return JSON.parse(serializedValue) as T;\n        } catch (e) {\n            console.error('serialized value', serializedValue);\n            console.error(`while parsing serialized value from key ${this.key}`, e);\n        }\n        return defaultValueToUse;\n    }\n}\n\n\nexport const storage = {\n    questions: new StorageValue<IQuestionsList>('mobius2019_questions'),\n    users: new StorageValue<IUser[]>('mobius2019_users'),\n    adminPass: new StorageValue<string>('mobius2019_adminPass'),\n};\n","import { IQuestionsList } from '../../models/qa';\nimport { storage } from '../../utils/storage';\n\n\nexport interface IQuestionsState {\n    questions: IQuestionsList;\n    currentQuestionId: number;\n};\n\n\nexport const questionsInitialState: IQuestionsState = {\n    questions: storage.questions.restore([]) as IQuestionsList,\n    currentQuestionId: 0,\n};\n","export function extendState<T>(state: T, toAdd: Partial<T>): T;\nexport function extendState<T, K extends keyof T>(state: T, key: K, value: T[K]): T\n\nexport function extendState<T, K extends keyof T>(state: T, toAddOrKey: Partial<T> | K, value?: T[K]): T {\n    const toAdd = arguments.length === 3\n        ? ({ [toAddOrKey as K]: value } as any) as Partial<T>\n        : toAddOrKey as Partial<T>;\n    return {\n        ...state,\n        ...toAdd\n    };\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IQuestionsState, questionsInitialState } from './questions-state';\nimport { IQuestion, INewQuestion, IQuestionsList } from '../../models/qa';\nimport { extendState } from '../../utils/extend-state';\n\n\nexport interface IQuestionsActionsToPayloads {\n    ADD: INewQuestion,\n    DELETE: IQuestion,\n    UPDATE: IQuestion,\n    REPLACE: IQuestionsList,\n    GO_TO_QUESTION: number,\n}\n\n\nexport const questionsActions = createDoActions<IQuestionsActionsToPayloads>(\n    'ADD', 'DELETE', 'UPDATE', 'REPLACE', 'GO_TO_QUESTION',\n);\n\n\nconst reducerObj: IReducerObj<IQuestionsState, IQuestionsActionsToPayloads> = {\n    'ADD': (state, action) => {\n        // INewQuestion will become IQuestion after 'id' will be added.\n        const question = { ...action.payload } as IQuestion;\n        const questions = state!.questions;\n        question.id = questions.length + 1;\n        return extendState(state!, 'questions', [...questions, question]);\n    },\n    'DELETE': (state, action) => {\n        const questionToDelete = action.payload;\n        const questions = state!.questions.map(question =>\n            question && question.id !== questionToDelete.id ? question : null);\n        return extendState(state!, 'questions', questions);\n    },\n    'UPDATE': (state, action) => {\n        const questionToUpdate = action.payload;\n        const resetIsFirst = questionToUpdate.isFirst;\n        const questions = state!.questions.map(question => {\n            if (!question) {\n                return null;\n            }\n            if (resetIsFirst) {\n                question = { ...question, isFirst: false };\n            }\n            return question.id === questionToUpdate.id ? questionToUpdate : question;\n        });\n        return extendState(state!, 'questions', questions);\n    },\n    'GO_TO_QUESTION': (state, action) => {\n        return extendState(state!, 'currentQuestionId', action.payload);\n    },\n    'REPLACE': (state, action) => {\n        return extendState(state!, 'questions', action.payload);\n    },\n};\n\n\nexport const questionsReducer = createReducer(reducerObj, questionsInitialState);\n","import { padStart } from './text';\n\nexport enum FILE_TYPES {\n    JSON = 'JSON',\n    CSV = 'CSV',\n}\n\n\nconst mimeTypes: { [key in FILE_TYPES]: string } = {\n    JSON: 'application/json',\n    CSV: 'text/csv',\n};\n\n\nexport interface IFileDescription {\n    content: any;\n    nameSection: string; // имя в файле без timestamp и расширения\n    type: FILE_TYPES;\n}\n\n\n/**\n * Выгружает пользователю файл.\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n * @param {object} params\n * @param {string} params.content\n * @param {string} params.type MIME-type.\n * @param {string} [params.charset='utf-8']\n * @param {object} [params.fileObject] Ранее сгенерированный объект для выгрузки этого файла.\n * @returns {File|Blob} See URL.createObjectURL API.\n */\nexport function getFileObject(params: {\n    content: string,\n    fileType: FILE_TYPES,\n    charset?: string,\n    fileObjectUrl?: string\n}): string {\n  releaseFileObject(params.fileObjectUrl);\n\n  const charset = params.charset || 'utf-8';\n  const mimeType = mimeTypes[params.fileType];\n  const type = `data:${mimeType};charset=${charset}`;\n  const data = new Blob([params.content], { type });\n  const fileObject = window.URL.createObjectURL(data);\n  return fileObject;\n}\n\n/**\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n */\nexport function releaseFileObject(fileObjectUrl?: string) {\n  if (fileObjectUrl) {\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    window.URL.revokeObjectURL(fileObjectUrl);\n  }\n}\n\n\n/**\n * Запрашивает у пользователю разделитель для значений в CSV.\n * @param {string} [defaultDelimiter=';']\n * @returns {string}\n */\n/*\nexport function getCSVDelimiter(defaultDelimiter = ';') {\n  const userDelimiter = prompt(`Введите разделитель для CSV.\\n`\n    + `По умолчанию будет использован символ \"${defaultDelimiter}\".`, defaultDelimiter);\n  return userDelimiter || defaultDelimiter;\n}\n*/\n\n\n/**\n * Читает с диска файл.\n * @param {File} file Объект File, который может быть получен из input/type=file.\n * @returns {Promise<string>}\n */\nexport function readFileAsString(file: File): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event: ProgressEvent) => {\n            const content = (event.target as any).result;\n            resolve(content);\n        };\n\n        reader.onerror = (error) => {\n            reject(error);\n        };\n\n        reader.readAsText(file);\n    });\n}\n\n\n/**\n * Получение timestamp для использования в именах файлов, например.\n * @returns {string}\n */\nfunction getTimestamp() {\n    const now = new Date();\n    const y = now.getFullYear();\n    const m = padStart(now.getMonth() + 1, 2, '0');\n    const d = padStart(now.getDate(), 2, '0');\n    const H = padStart(now.getHours(), 2, '0');\n    const M = padStart(now.getMinutes(), 2, '0');\n    const S = padStart(now.getSeconds(), 2, '0');\n    return `${y}-${m}-${d}--${H}-${M}-${S}`;\n}\n\n\nexport function getFileName(section: string, extension?: string): string {\n    const timestamp = getTimestamp();\n    const fileName = extension\n        ? `${section}-${timestamp}.${extension}`\n        : `${timestamp}-${section}`;\n    return fileName;\n}\n","import { IUser } from '../../models/user';\nimport { storage } from '../../utils/storage';\n\n\nexport interface IUsersState {\n    users: IUser[];\n    currentUser: IUser | null;\n    registrationUser: IUser | null;\n    currentCategories: IUser['categories'];\n};\n\n\nexport const usersInitialState: IUsersState = {\n    users: storage.users.restore([]) as IUser[],\n    currentUser: null,\n    registrationUser: null,\n    currentCategories: {},\n};\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IUsersState, usersInitialState } from './users-state';\nimport { IUser } from '../../models/user';\nimport { extendState } from '../../utils/extend-state';\n\n\nexport interface IUsersActionsToPayloads {\n    REG_USER: IUser;\n    ADD_OR_UPDATE: IUser;\n    CLEAR_REG_USER: void;\n    CLEAR_CATEGORIES: void;\n    HANDLE_CATEGORIES: string | undefined;\n}\n\n\nexport const usersActions = createDoActions<IUsersActionsToPayloads>(\n    'ADD_OR_UPDATE', 'REG_USER', 'CLEAR_REG_USER', 'HANDLE_CATEGORIES', 'CLEAR_CATEGORIES'\n);\n\n\nconst reducerObj: IReducerObj<IUsersState, IUsersActionsToPayloads> = {\n    'HANDLE_CATEGORIES': (state, action) => {\n        if (!action.payload) {\n            return state!;\n        }\n        const currentCategories = { ...state!.currentCategories };\n        action.payload\n            .split(',')\n            .map(category => category.trim())\n            .filter(Boolean)\n            .forEach(category => currentCategories[category] = (currentCategories[category] || 0) + 1);\n        console.log('currentCategories', currentCategories);\n        return extendState(state!, 'currentCategories', currentCategories);\n    },\n    'CLEAR_CATEGORIES': (state) => extendState(state!, 'currentCategories', {}),\n    'CLEAR_REG_USER': (state) => extendState(state!, 'registrationUser', null),\n    'REG_USER': (state, action) => extendState(state!, 'registrationUser', action.payload),\n    'ADD_OR_UPDATE': (state, action) => {\n        const rawUser = action.payload;\n        const newUser = Object.keys(rawUser).reduce<IUser>((memo, key) => {\n            const userKey = key as keyof IUser;\n            const newValue = rawUser[userKey];\n            memo[userKey] = typeof newValue === 'string' ? newValue.trim() : newValue;\n            return memo;\n        }, {} as IUser);\n        newUser.categories = { ...state!.currentCategories };\n        const sameUserIndex = state!.users.findIndex(user => user.phone === newUser.phone);\n        const hasSameUser = sameUserIndex !== -1;\n        let newUsersList = [...state!.users];\n        if (hasSameUser) {\n            newUsersList[sameUserIndex] = newUser;\n        } else {\n            newUsersList.push(newUser);\n        }\n        extendState(state!, 'currentUser', newUser);\n        return extendState(state!, 'users', newUsersList);\n    },\n};\n\n\nexport const usersReducer = createReducer(reducerObj, usersInitialState);\n","import { fullScreenActions } from './full-screen/full-screen-reducer';\nimport { routingActions } from './routing/routing-reducer';\nimport { questionsActions } from './questions/questions-reducer';\nimport { usersActions } from './users/users-reducer';\n\n\nexport const doActions = {\n    fullScreen: fullScreenActions,\n    routing: routingActions,\n    questions: questionsActions,\n    users: usersActions,\n};\n","import { App } from './app';\n\nexport const app = new App();\n\nexport * from './route-states';\n","import { Unsubscribe } from 'redux';\nimport { IAppStore } from '../redux/store';\nimport { IAppState } from '../redux/state';\nimport { doActions } from '../redux/do-actions';\nimport { ROUTE_STATES } from './route-states';\nimport { IQuestion, IQuestionsList, IAnswer } from '../models/qa';\nimport { IExportedQuestions } from '../models/export';\nimport { storage } from '../utils/storage';\nimport { IUser } from '../models/user';\nimport md5 from 'blueimp-md5';\n\nexport class App {\n\n    private _store: IAppStore | null = null;\n\n    private storeUnsubscriber: Unsubscribe | null = null;\n\n    private storedQuestions: IQuestionsList = [];\n    private storedUsers: IUser[] = [];\n\n    private get state(): IAppState {\n        return this._store!.getState();\n    }\n\n\n    ROUTE_STATES = ROUTE_STATES;\n\n\n    setStore(store: IAppStore) {\n        this._store = store;\n        this.unsubscribeStore();\n        if (store) {\n            store.subscribe(() => {\n                const state = store.getState();\n                this.storeQuestions(state);\n                this.storeUsers(state);\n            });\n        }\n    }\n\n\n    restartGame() {\n        doActions.users.CLEAR_REG_USER(this._store);\n        doActions.users.CLEAR_CATEGORIES(this._store);\n        doActions.questions.GO_TO_QUESTION(this._store, 0);\n        doActions.routing.GO_TO(this._store, ROUTE_STATES.QUEST);\n    }\n\n\n    toggleFullscreen() {\n        doActions.fullScreen.TOGGLE(this._store);\n    }\n\n\n    goToRoute(route: ROUTE_STATES) {\n        doActions.routing.GO_TO(this._store, route);\n    }\n\n\n    addQuestion(question: IQuestion) {\n        doActions.questions.ADD(this._store, question);\n    }\n\n\n    deleteQuestion(question: IQuestion) {\n        doActions.questions.DELETE(this._store, question);\n    }\n\n\n    updateQuestion(question: IQuestion) {\n        doActions.questions.UPDATE(this._store, question);\n    }\n\n\n    nextQuestion(answer: IAnswer, questionId: number) {\n        doActions.users.HANDLE_CATEGORIES(this._store, answer.categories);\n        doActions.questions.GO_TO_QUESTION(this._store, questionId);\n        const registrationUser = this.state.users.registrationUser;\n        if (registrationUser) {\n            doActions.users.ADD_OR_UPDATE(this._store, {\n                ...registrationUser,\n                lastQuestionId: questionId\n            });\n        }\n    }\n\n    updateQuestions(questions: IQuestionsList | IExportedQuestions) {\n        const qs = questions instanceof Array ? questions : (questions as IExportedQuestions).questions;\n        doActions.questions.REPLACE(this._store, qs);\n    }\n\n\n    registerUser(user: IUser) {\n        doActions.users.REG_USER(this._store, user);\n    }\n\n\n    goToAdmin() {\n        const storedAdminPassHash = storage.adminPass.restore();\n        const msg = storedAdminPassHash\n            ? 'Введите пароль для доступа к разделу \"Администрирование\"'\n            : 'Задайте новый пароль для доступа к разделу \"Администрирование\"';\n        const adminPass = prompt(msg, '');\n\n        if (!adminPass) {\n            alert('Вы не ввели пароль!');\n            return;\n        }\n\n        const adminPassHash = md5(adminPass);\n\n        if (storedAdminPassHash) {\n            if (storedAdminPassHash !== adminPassHash) {\n                alert('Пароль введён неверно!');\n                return;\n            }\n        } else {\n            storage.adminPass.store(adminPassHash);\n            alert('Пароль сохранён!');\n        }\n\n        this.goToRoute(ROUTE_STATES.ADMIN_MAIN);\n    }\n\n\n    private unsubscribeStore() {\n        if (this.storeUnsubscriber) {\n            this.storeUnsubscriber();\n            this.storeUnsubscriber = null;\n        }\n    }\n\n\n    private storeQuestions(state: IAppState) {\n        const stateQuestions = state.questions.questions;\n        if (stateQuestions !== this.storedQuestions) {\n            this.storedQuestions = stateQuestions;\n            storage.questions.store(stateQuestions);\n        }\n    }\n\n\n    private storeUsers(state: IAppState) {\n        const stateUsers = state.users.users;\n        if (stateUsers !== this.storedUsers) {\n            this.storedUsers = stateUsers;\n            storage.users.store(stateUsers);\n        }\n    }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AppHeader.css';\nimport classnames from 'classnames';\nimport { app, ROUTE_STATES } from '../../app';\nimport * as screenfull from \"screenfull\";\nimport {Screenfull} from \"screenfull\";\nimport { IMapStateToProps } from '../../redux/connect';\n\n// https://github.com/sindresorhus/screenfull.js/issues/126#issuecomment-488796645\nlet sf = screenfull as Screenfull;\n\n\ninterface IAppHeaderProps {\n    className: string;\n    route?: ROUTE_STATES;\n    isFullScreen?: boolean;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppHeaderProps, 'isFullScreen'> = (state) => ({\n    route: state.routing.route,\n    isFullScreen: state.fullScreen.inFullscreen\n});\n\n\nclass AppHeaderComponent extends React.Component<IAppHeaderProps> {\n\n    toggleState = () => app.toggleFullscreen();\n\n\n    render() {\n        const { className, isFullScreen, route } = this.props;\n        const mainRouteState = route === ROUTE_STATES.MAIN;\n        const conditionalClasses = {\n            'AppHeader_small': !mainRouteState\n        };\n\n        return (\n            <div className={classnames('AppHeader', className, conditionalClasses)}>\n                { !isFullScreen && mainRouteState && (\n                    <button type=\"button\" onClick={() => this.toggleFullScreen()} className=\"AppHeader__fullscreen\">\n                        Развернуть\n                    </button>\n                )}\n                { !mainRouteState && (\n                    <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}>\n                        На главную\n                    </button>\n                )}\n            </div>\n        );\n    }\n\n\n    componentDidMount() {\n        sf.on('change', this.toggleState);\n    }\n\n\n    componentWillUnmount() {\n        sf.off('change', this.toggleState);\n    }\n\n\n    toggleFullScreen() {\n        sf.toggle()\n            .catch(error => console.log(\n                `while toggling fullsreen state, current state is ${this.props.isFullScreen}`,\n                error\n            ));\n    }\n\n}\n\n\nexport const AppHeader = connect(mapStateToProps)(AppHeaderComponent);\n","import React from 'react';\nimport './Landing.css';\nimport { app } from '../../app';\n\n\ninterface ILandingProps {\n}\n\n\nconst LandingComponent: React.FC<ILandingProps> = () => {\n    return (\n        <div>\n            <div>\n                <button type=\"button\" onClick={() => app.restartGame()}>\n                    Начать\n                </button>\n            </div>\n            <div className=\"Landing__goToAdmin\">\n                <button type=\"button\" onClick={() => app.goToAdmin() }>\n                    Администрирование\n                </button>\n            </div>\n        </div>\n    );\n};\n\n\nexport const Landing = LandingComponent;\n","/**\n * Дополняет заданными символами слева до нужной длины строки.\n * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n */\nexport function padStart(item: string|number, strLength: number, symbol: string): string {\n    const strItem = '' + item;\n    return strItem.padStart(strLength, symbol);\n}\n","import React from 'react';\nimport './FileExport.css';\nimport { IFileDescription, releaseFileObject, getFileObject, getFileName, FILE_TYPES } from '../../utils/file';\n\n\ninterface IFileExportProps {\n    getFileDescription: () => IFileDescription;\n    buttonText: string;\n}\n\n\ninterface IFileExportState {\n    fileObjectUrl: string;\n    fileName: string;\n}\n\n\nclass FileExportComponent extends React.Component<IFileExportProps, IFileExportState> {\n\n    state: IFileExportState = {\n        fileObjectUrl: '',\n        fileName: ''\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        const { fileObjectUrl, fileName } = this.state;\n\n        return (\n            <div>\n                <button type=\"button\"\n                    onClick={() => this.prepareFile()}\n                    className=\"FileExport__button\"\n                >\n                    { buttonText }\n                </button>\n                { fileObjectUrl && (\n                    <a href={fileObjectUrl} download={fileName}\n                        className=\"FileExport__button\"\n                    >\n                        Скачать файл\n                    </a>\n                )}\n            </div>\n        );\n    }\n\n\n    private prepareFile() {\n        this.releaseStateFileObject();\n\n        const fileDescription = this.props.getFileDescription();\n        this.setState({\n            fileObjectUrl: getFileObject({\n                content: this.stringifyContent(fileDescription.content),\n                fileType: fileDescription.type\n            }),\n            fileName: getFileName(fileDescription.nameSection, FILE_TYPES[fileDescription.type].toLowerCase())\n        });\n    }\n\n\n    private releaseStateFileObject() {\n        const { fileObjectUrl } = this.state;\n        if (fileObjectUrl) {\n            releaseFileObject(fileObjectUrl);\n        }\n    }\n\n\n    private stringifyContent(content: any): string {\n        if (!content) {\n            return '';\n        }\n        if (typeof content === 'object') {\n            // readable json\n            return JSON.stringify(content, null, 4);\n        }\n        return JSON.stringify(content);\n    }\n\n};\n\n\nexport const FileExport = FileExportComponent;\n","import React, { ChangeEvent } from 'react';\nimport './FileImport.css';\nimport { readFileAsString } from '../../utils/file';\n\n\ninterface IFileImportProps {\n    buttonText: string;\n    onContentRead: (content: any) => void;\n    parseJson?: boolean;\n}\n\n\ninterface IFileImportState {\n}\n\n\nclass FileImportComponent extends React.Component<IFileImportProps, IFileImportState> {\n\n    state: IFileImportState = {\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        return (\n            <label className=\"FileImport\">\n                { buttonText }\n                <input type=\"file\"\n                    className=\"FileImport_import\"\n                    onChange={(event) => this.onFileSelected(event)}\n                />\n            </label>\n        );\n    }\n\n\n    private onFileSelected(event: ChangeEvent<HTMLInputElement>) {\n        const files = event.target.files;\n        const file = files && files[0];\n        if (file) {\n            readFileAsString(file)\n                .then(content => {\n                    const { parseJson, onContentRead } = this.props;\n\n                    if (!parseJson) {\n                        return onContentRead(content);\n                    }\n\n                    const json = JSON.parse(content);\n                    onContentRead(json);\n                })\n                .catch(error => console.error(`while reading file ${file.name}`, error));\n        }\n    }\n\n};\n\n\nexport const FileImport = FileImportComponent;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AdminMenu.css';\nimport { app } from '../../app';\nimport { IQuestionsList } from '../../models/qa';\nimport { IExportedQuestions } from '../../models/export';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { FileExport } from '../FileExport/FileExport';\nimport { FileImport } from '../FileImport/FileImport';\nimport { FILE_TYPES } from '../../utils/file';\nimport { IUser } from '../../models/user';\n\n\ninterface IAdminMenuProps {\n    questions?: IQuestionsList;\n    users?: IUser[];\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAdminMenuProps, 'questions'> = (state) => ({\n    questions: state.questions.questions,\n    users: state.users.users,\n});\n\n\nconst AdminMenuComponent: React.FC<IAdminMenuProps> = ({ questions, users }) => {\n    return (\n        <ul className=\"AdminMenu__menu\">\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.ADMIN_QUESTIONS_LIST)}>\n                    Управление вопросами\n                </button>\n            </li>\n            <li>\n                <FileImport buttonText=\"Прочитать вопросы из файла\"\n                    parseJson={true}\n                    onContentRead={(questions: IQuestionsList | IExportedQuestions) => {\n                        app.updateQuestions(questions);\n                        window.alert('Вопрос прочитаны успешно!');\n                    }}\n                />\n            </li>\n            <li>\n                <FileExport buttonText=\"Скачать вопросы\"\n                    getFileDescription={() => ({\n                        type: FILE_TYPES.JSON,\n                        content: { questions },\n                        nameSection: 'questions'\n                    })}\n                />\n            </li>\n            <li>\n                <FileExport buttonText=\"Выгрузить пользователей\"\n                    getFileDescription={() => ({\n                        type: FILE_TYPES.JSON,\n                        content: { users },\n                        nameSection: 'users'\n                    })}\n                />\n            </li>\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}>\n                    На главную\n                </button>\n            </li>\n        </ul>\n    );\n};\n\n\nexport const AdminMenu = connect(mapStateToProps)(AdminMenuComponent);\n","import { IUser } from '../models/user';\n\nexport type IPlaceholders = '<%reg%>' | '<%login%>' | '<%br%>';\n\nexport const placeholdersInfo: { [key in IPlaceholders]: string} = {\n    '<%reg%>': 'поля для ввода регистрационных данных (только для вопросов)',\n    '<%login%>': 'вывод логина или \"Пользователь\" (по умолчанию)',\n    '<%br%>': 'принудительный перенос строки (удобно для рандомов)'\n};\n\n\nexport const placeholders: {\n    reg: IPlaceholders,\n    login: IPlaceholders,\n    br: IPlaceholders,\n} = {\n    reg: '<%reg%>',\n    login: '<%login%>',\n    br: '<%br%>',\n};\n\n\nfunction handleBr(text: string): string {\n    return text.split(placeholders.br).join('\\n');\n}\n\n\nfunction handleLogin(text: string, user?: IUser | null): string {\n    const login = user ? user.login : 'Пользователь';\n    return text.split(placeholders.login).join(login);\n}\n\n\nexport function handlePlaceholders(text: string, user?: IUser | null) {\n    const afterBr = handleBr(text);\n    const afterLogin = handleLogin(afterBr, user);\n    return afterLogin;\n}\n","import * as React from 'react';\nimport { IQuestion, IAnswer, IQuestionsList } from '../../models/qa';\nimport './QuestionEdit.css';\nimport classnames from 'classnames';\nimport { cloneQuestion } from '../../utils/clone-question';\nimport { placeholders } from '../../utils/placeholders';\n\n\ninterface IQuestionEditProps {\n    question?: IQuestion;\n    qs: IQuestionsList;\n    onSave: (question: IQuestion) => void;\n    onDelete?: (question: IQuestion) => void;\n    className?: string;\n}\n\n\ninterface IQuestionEditState {\n    question?: IQuestion;\n    isNew: boolean;\n    hideTextError: boolean;\n}\n\n\nfunction getNewQuestion(): IQuestion {\n    return {\n        id: 0,\n        text: '',\n        // title: '',\n        answers: []\n    }\n}\n\n\nexport class QuestionEdit extends React.Component<IQuestionEditProps, IQuestionEditState> {\n\n    state: IQuestionEditState = {\n        isNew: true,\n        hideTextError: false,\n    };\n\n\n    static getDerivedStateFromProps(props: IQuestionEditProps, state: IQuestionEditState): IQuestionEditState | null {\n        const propQuestion = props.question;\n        const stateQuestion = state.question;\n\n        if (propQuestion) {\n            if (stateQuestion && stateQuestion.id === propQuestion.id) {\n                // update isFirst\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: {\n                    ...stateQuestion,\n                    isFirst: propQuestion.isFirst\n                }\n                }\n            } else {\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: cloneQuestion(propQuestion)\n                };\n            }\n        } else if (stateQuestion) {\n            return null;\n        }\n\n        return {\n            isNew: true,\n            hideTextError: true,\n            question: getNewQuestion()\n        };\n    }\n\n\n    render() {\n        const { question, isNew, hideTextError } = this.state;\n        const { qs, className } = this.props;\n        const hasAnswers = question!.answers.filter(Boolean).length > 0;\n        const isFinal = !hasAnswers;\n        const tooManyReg = question!.text.split(placeholders.reg).length > 2;\n\n        const mainHtmlId = `QuestionEdit__${question!.id}`;\n        // const titleHtmlId = `${mainHtmlId}__title`;\n        const textHtmlId = `${mainHtmlId}__text`;\n        const isFirstHtmlId = `${mainHtmlId}__isFirst`;\n        const randomTextHtmlId = `${mainHtmlId}__randomText`;\n\n        const rootId = this.getRootId(this.props.question ? this.props.question.id : 0);\n\n        return (\n            <div className={classnames('QuestionEdit', className)} id={rootId}>\n                <form onSubmit={(event) => this.onSubmit(question!, event)}>\n                    <div className={classnames('QuestionEdit__indented', 'QuestionEdit__row')}>\n                        <b>\n                            {isNew\n                                ? 'Новый вопрос'\n                                : isFinal\n                                    ? `Финал, #${question!.id}`\n                                    : `Вопрос, #${question!.id}`\n                            }\n                        </b>\n                        {!isFinal && (\n                            <div className={classnames('QuestionEdit__wideItem', 'QuestionEdit__checkboxContainer')}>\n                                <label>\n                                    <input type=\"checkbox\"\n                                        name={isFirstHtmlId}\n                                        checked={!!question!.isFirst}\n                                        onChange={(event) => this.updateQuestionProp('isFirst', event.target.checked)}\n                                        className=\"QuestionEdit__checkbox\"\n                                    />\n                                    первый вопрос\n                                </label>\n                            </div>\n                        )}\n                    </div>\n                    {/* <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={titleHtmlId}>\n                            Заголовок\n                        </label>\n                        <input name={titleHtmlId}\n                            type=\"text\"\n                            id={titleHtmlId}\n                            value={question!.title || ''}\n                            onChange={(event) => this.updateQuestionProp('title', event.target.value)}\n                            className=\"QuestionEdit__wideItem\"\n                            placeholder=\"Необязательно\"\n                        />\n                    </div> */}\n                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={textHtmlId}>\n                            Текст\n                        </label>\n                        <div className=\"QuestionEdit__wideItem\">\n                            <textarea name={textHtmlId}\n                                id={textHtmlId}\n                                className={classnames('', 'QuestionEdit__bigEditor')}\n                                value={question!.text || ''}\n                                onChange={(event) => this.updateQuestionProp('text', event.target.value)}\n                                placeholder=\"Заполните текст вопроса!\"\n                            ></textarea>\n                            <div className=\"QuestionEdit__checkboxContainer\">\n                                <label>\n                                    <input type=\"checkbox\"\n                                        name={randomTextHtmlId}\n                                        checked={!!question!.randomLineText}\n                                        onChange={(event) => this.updateQuestionProp('randomLineText', event.target.checked)}\n                                        className=\"QuestionEdit__checkbox\"\n                                    />\n                                    показывать рандомную строку\n                                </label>\n                            </div>\n                            { question!.randomLineText && (\n                                <div>\n                                    ВНИМАНИЕ: пользователю будет отображаться рандомная непустая строка из текста этого вопроса!!!\n                                </div>\n                            )}\n                            { tooManyReg && (\n                                <div className=\"QuestionEdit__error\">\n                                    Вы вставили больше одного блока ввода регистрационных данных!\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    {\n                        !question!.text && !hideTextError && (\n                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                Заполните текст вопроса!\n                            </div>\n                        )\n                    }\n\n                    {\n                        hasAnswers && (\n                            <div className={'QuestionEdit__indented'}>\n                                Ответы:\n                            </div>\n                        )\n                    }\n\n                    {\n                        question!.answers.map((answerOrNull, index) => {\n                            if (!answerOrNull) {\n                                return null;\n                            }\n\n                            const answer = answerOrNull!;\n                            const answerHtmlId = `${mainHtmlId}_answer_${answer.id}`;\n                            const answerGotoHtmlId = `${answerHtmlId}_goto`;\n                            const answerInputHtmlId = `${answerHtmlId}_input`;\n                            const answerWrongInputGotoHtmlId = `${answerHtmlId}_wrongInputGot`;\n                            const answerRandomLineHtmlId = `${answerHtmlId}_randomLine`;\n                            const answerCategoriesHtmlId = `${answerHtmlId}_categories`;\n\n                            return (\n                                <div className={'QuestionEdit__indented'} key={answer.id}>\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')} key={`${answer.id}_text`}>\n                                        <textarea\n                                            name={answerHtmlId}\n                                            id={answerHtmlId}\n                                            value={answer.text || ''}\n                                            onChange={(event) => this.updateAnswerProp(answer, 'text', event.target.value)}\n                                            className={classnames('QuestionEdit__wideItem', 'QuestionEdit__bigEditor')}\n                                            placeholder=\"Заполните текст ответа!!!\"\n                                        ></textarea>\n                                        <button type=\"button\" onClick={() => this.deleteAnswer(index)}>\n                                            Удалить\n                                        </button>\n                                    </div>\n                                    {\n                                        !answer.text && (\n                                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                                Заполните текст ответа!!!\n                                            </div>\n                                        )\n                                    }\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented', 'QuestionEdit__hor-indented')}>\n                                        <label htmlFor={answerCategoriesHtmlId}>\n                                            Категории:\n                                        </label>\n                                        <input type=\"text\"\n                                            value={answer.categories || ''}\n                                            onChange={(event) => this.updateAnswerProp(answer, 'categories', event.target.value)}\n                                            className=\"QuestionEdit__wideItem\"\n                                        />\n                                    </div>\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented', 'QuestionEdit__hor-indented', 'QuestionEdit__checkboxContainer')}\n                                        key={`${answer.id}_randomLine`}\n                                    >\n                                        <label>\n                                            <input type=\"checkbox\"\n                                                name={answerRandomLineHtmlId}\n                                                checked={!!answer.randomLine}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'randomLine', event.target.checked)}\n                                                className=\"QuestionEdit__checkbox\"\n                                            />\n                                            показывать произвольную строчку\n                                        </label>\n                                    </div>\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented', 'QuestionEdit__hor-indented', 'QuestionEdit__checkboxContainer')}\n                                        key={`${answer.id}_userInput`}\n                                    >\n                                        <label>\n                                            <input type=\"checkbox\"\n                                                name={answerInputHtmlId}\n                                                checked={!!answer.needUserInput}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'needUserInput', event.target.checked)}\n                                                className=\"QuestionEdit__checkbox\"\n                                            />\n                                            пользовательский ввод\n                                        </label>\n                                    </div>\n                                    { answer.needUserInput && (\n                                        <div className={classnames('QuestionEdit__row', 'QuestionEdit__hor-indented')} key={`${answer.id}_wrongInputGoto`}>\n                                            <label htmlFor={answerWrongInputGotoHtmlId}>\n                                                Ошибка на\n                                            </label>\n                                            <div className={'QuestionEdit__wideItem'}>\n                                                <select id={answerWrongInputGotoHtmlId}\n                                                    value={answer.incorrectUserInputNextQuestion || '0'}\n                                                    name={answerWrongInputGotoHtmlId}\n                                                    onChange={(event) => this.updateAnswerProp(answer, 'incorrectUserInputNextQuestion', parseInt(event.target.value, 10))}\n                                                >\n                                                    {!answer.incorrectUserInputNextQuestion && (\n                                                        <option value=\"0\">\n                                                            Выберите точку перехода при неверном вводе\n                                                        </option>\n                                                    )}\n                                                    {\n                                                        qs.map(question => question && (\n                                                            <option key={question.id} value={question.id}>\n                                                                {/* {question.title || question.text} */}\n                                                                { question.text }\n                                                            </option>\n                                                        ))\n                                                    }\n                                                </select>\n                                                <div>\n                                                    <a href={`#${this.getRootId(answer.incorrectUserInputNextQuestion)}`}>\n                                                        {answer.incorrectUserInputNextQuestion ? 'к вопросу' : 'создать новый'}\n                                                    </a>\n                                                </div>\n                                                {\n                                                    !answer.incorrectUserInputNextQuestion && (\n                                                        <div className=\"QuestionEdit__error\">\n                                                            Выберите точку перехода!!!\n                                                        </div>\n                                                    )\n                                                }\n                                            </div>\n                                        </div>\n                                    )}\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__hor-indented')} key={`${answer.id}_goto`}>\n                                        <label htmlFor={answerGotoHtmlId}>\n                                            Перейти к\n                                        </label>\n                                        <div className={'QuestionEdit__wideItem'}>\n                                            <select id={answerGotoHtmlId}\n                                                value={answer.nextQuestion}\n                                                name={answerGotoHtmlId}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'nextQuestion', parseInt(event.target.value, 10))}\n                                            >\n                                                {!answer.nextQuestion && (\n                                                    <option value=\"0\">\n                                                        Выберите точку перехода!!!\n                                                    </option>\n                                                )}\n                                                {\n                                                    qs.map(question => question && (\n                                                        <option key={question.id} value={question.id}>\n                                                            {/* {question.title || question.text} */}\n                                                            { question.text }\n                                                        </option>\n                                                    ))\n                                                }\n                                            </select>\n                                            <div>\n                                                <a href={`#${this.getRootId(answer.nextQuestion)}`}>\n                                                    {answer.nextQuestion ? 'к вопросу' : 'создать новый'}\n                                                </a>\n                                            </div>\n                                            {\n                                                !answer.nextQuestion && (\n                                                    <div className=\"QuestionEdit__error\">\n                                                        Выберите точку перехода!!!\n                                                    </div>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n\n                    <div className={'QuestionEdit__indented'}>\n                        <button type=\"button\" onClick={() => this.addAnswer()}>\n                            Добавить ответ\n                        </button>\n                    </div>\n\n                    <div className={'QuestionEdit__indented'}>\n                        {isNew && (\n                            <button type=\"submit\" className={'QuestionEdit__submit'}>\n                                Добавить этот вопрос\n                            </button>\n                        )}\n                        {\n                            this.props.onDelete && (\n                                <button type=\"button\" className={'QuestionEdit__delete'} onClick={() => this.props.onDelete!(question!)}>\n                                    Удалить вопрос\n                                </button>\n                            )\n                        }\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n\n    private updateQuestionProp<K extends keyof IQuestion>(propName: K, propValue: IQuestion[K]) {\n        const question = { ...this.state.question, [propName]: propValue } as IQuestion;\n        this.setState({\n            question,\n            hideTextError: false\n        });\n\n        if (!this.state.isNew) {\n            this.onSubmit(question);\n        }\n    }\n\n\n    private updateAnswerProp<K extends keyof IAnswer>(originalAnswer: IAnswer, propName: K, propValue: IAnswer[K]) {\n        const updatedAnswer = { ...originalAnswer, [propName]: propValue } as IAnswer;\n        const answers = this.state.question!.answers.map(answer => answer && answer.id === originalAnswer.id ? updatedAnswer : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private onSubmit(question: IQuestion, event?: React.BaseSyntheticEvent) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (!question.text) {\n            return;\n        }\n\n        if (this.state.isNew) {\n            if (event) {\n                this.props.onSave(question);\n                this.setState({\n                    hideTextError: true,\n                    question: getNewQuestion()\n                });\n            }\n        } else {\n            this.props.onSave(question);\n        }\n    }\n\n\n    private deleteAnswer(answerIndex: number) {\n        const answers = this.state.question!.answers.map((answer, index) => !answer || index === answerIndex ? null : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private addAnswer() {\n        const stateAnswers = this.state.question!.answers;\n        const newAnswer: IAnswer = {\n            id: stateAnswers.length + 1,\n            text: '',\n            nextQuestion: 0,\n        };\n        const answers = [...stateAnswers, newAnswer];\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private getRootId(questionId?: number): string {\n        const baseId = 'QuestionEdit_root_';\n        return questionId ? `${baseId}_${questionId}` : `${baseId}_new`;\n    }\n\n}\n","import { IQuestion } from '../models/qa';\n\nexport function cloneQuestion(question: IQuestion): IQuestion {\n    return {\n      ...question,\n      answers: question.answers.map(answer => answer ? { ...answer } : null)\n    };\n  }\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './QuestionsManagement.css';\nimport { app } from '../../app';\nimport { QuestionEdit } from '../QuestionEdit/QuestionEdit';\nimport { IQuestionsList } from '../../models/qa';\nimport { placeholdersInfo, IPlaceholders } from '../../utils/placeholders';\n\n\ninterface IQuestionsManagementProps {\n    questions?: IQuestionsList;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestionsManagementProps, 'questions'> = (state) => ({\n    questions: state.questions.questions\n});\n\n\nconst QuestionsManagementComponent: React.FC<IQuestionsManagementProps> = (props) => {\n    const qs = props.questions!;\n\n    return (\n        <div>\n            <div>\n                Задайте вопросы квеста!\n                <br />\n                Вопросы без ответов считаются финальными состояними квеста!\n                <br />\n                Ответы без текста или без указания цели перехода отображены не будут!\n                <br />\n                При удалении вопросов или ответов номера остальных вопросов/ответов не меняются!\n                <br />\n                Фильтрация по категориям: формат \"cat:\" + ИМЯ_КАТЕГОРИИ + \":\" + ЗНАЧЕНИЕ + УСЛОВИЕ + \":\"\n                Например: \"cat:ios:3|неплохо знаете iOS\" - строка \"неплохо знаете iOS\" будет показана,\n                если у пользователя точно 3 ответа категории ios. \"cat:ios:0|cat:android:1{'<'}|человек-android\"\n                - строка \"человек-android\" будет показана, если у пользователя нет ответов категории ios\n                и больше 1 ответа категории \"android\". В качестве условия можно использовать '{'<'}' или '{'>'}'.\n            </div>\n            <div>\n                В тексте вопросов и ответов можно использовать подстановки:\n                {\n                    Object.keys(placeholdersInfo).map((placeholder, index) => (\n                        <div key={index}>\n                            { placeholder } - { placeholdersInfo[placeholder as IPlaceholders] }\n                        </div>\n                    ))\n                }\n            </div>\n\n            <QuestionEdit\n                className=\"QuestionsManagement__question\"\n                onSave={(question) => app.addQuestion(question)}\n                qs={qs}\n            />\n\n            {\n                qs.map(question => question && (\n                    <QuestionEdit\n                        className=\"QuestionsManagement__question\"\n                        question={question}\n                        key={question.id}\n                        onSave={(question) => app.updateQuestion(question)}\n                        onDelete={(question) => app.deleteQuestion(question)}\n                        qs={qs}\n                    />\n                ))\n            }\n\n            <div className=\"QuestionsManagement__link-container\">\n                <button type=\"button\"\n                    onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                >\n                    На главную\n                </button>\n            </div>\n\n        </div>\n    );\n\n};\n\n\nexport const QuestionsManagement = connect(mapStateToProps)(QuestionsManagementComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { app } from '../../app';\nimport { IUser } from '../../models/user';\nimport './RegistrationForm.css';\nimport { getNewUser } from '../../utils/get-new-user';\n\n\ninterface IRegistrationFormProps {\n    route: string;\n    className?: string;\n}\n\n\ninterface IRegistrationFormState {\n    user: IUser;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IRegistrationFormProps, 'route'> = (state) => ({\n    route: state.routing.route\n});\n\n\nclass RegistrationFormComponent extends React.Component<IRegistrationFormProps, IRegistrationFormState> {\n\n    state = {\n        user: getNewUser()\n    };\n\n    render() {\n        const mainId = `RegistrationForm`;\n        const firstNameId = `${mainId}_fn`;\n        const lastNameId = `${mainId}_ln`;\n        const phoneId = `${mainId}_phone`;\n        const loginId = `${mainId}_login`;\n\n        return (\n            <ul className={this.props.className}>\n                <li>\n                    <label htmlFor={firstNameId} className=\"RegistrationForm__label\">\n                        Имя:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={firstNameId}\n                        name={firstNameId}\n                        maxLength={100}\n                        value={this.state.user.firstName}\n                        onChange={(event) => this.updateUser('firstName', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={lastNameId} className=\"RegistrationForm__label\">\n                        Фамилия:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={lastNameId}\n                        name={lastNameId}\n                        maxLength={100}\n                        value={this.state.user.lastName}\n                        onChange={(event) => this.updateUser('lastName', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={phoneId} className=\"RegistrationForm__label\">\n                        Телефон:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={phoneId}\n                        name={phoneId}\n                        maxLength={100}\n                        value={this.state.user.phone}\n                        onChange={(event) => this.updateUser('phone', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={loginId} className=\"RegistrationForm__label\">\n                        Логин:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={loginId}\n                        name={loginId}\n                        maxLength={100}\n                        value={this.state.user.login}\n                        onChange={(event) => this.updateUser('login', event)}\n                    />\n                </li>\n            </ul>\n        );\n    }\n\n\n    private updateUser(userProp: keyof IUser, event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value;\n        const user = { ...this.state.user, [userProp]: value };\n        this.setState({ user });\n        app.registerUser(user);\n    }\n\n}\n\n\nexport const RegistrationForm = connect(mapStateToProps)(RegistrationFormComponent);\n","import { IUser } from '../models/user';\n\nexport function getNewUser(): IUser {\n    return {\n        firstName: '',\n        lastName: '',\n        login: '',\n        phone: '',\n        lastQuestionId: 0,\n        categories: {},\n    };\n}\n","import { IUser } from '../models/user';\n\n\nfunction replaceCategory(line: string, categories: IUser['categories']): string | null {\n    if (!line.startsWith('cat:')) {\n        return line;\n    }\n    const matches = line.match(/^cat:(\\w+):(\\d+)([<>]?)/);\n    if (!matches || matches.length !== 4) {\n        console.log('handleTextCategories: match was failed for string', line);\n        return line;\n    }\n    const matchStr = matches[0];\n    const catName = matches[1];\n    const catValue = parseInt(matches[2], 10);\n    const condition = matches[3];\n    if (isNaN(catValue)) {\n        console.log('handleTextCategories: category value isNaN:', matches[2]);\n        return line;\n    }\n    const currentCatValue = categories[catName];\n    // Category condition + separator (|)\n    const restLine = line.slice(matchStr.length + 1);\n    const checkPassed = (!condition && catValue === currentCatValue)\n        || (condition === '<' && catValue < currentCatValue)\n        || (condition === '>' && catValue > currentCatValue);\n    if (checkPassed) {\n        return replaceCategory(restLine, categories);\n    }\n    return null;\n}\n\n\nexport function handleTextCategories(text: string, categories?: IUser['categories']): string {\n    console.log('categories', categories);\n    if (!categories) {\n        return text;\n    }\n    const handledText = text.split('\\n')\n        .map(line => replaceCategory(line, categories!))\n        .filter(line => line !== null)\n        .join('\\n');\n    return handledText;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './Quest.css';\nimport { app } from '../../app';\nimport { IQuestion, IQuestionsList, IAnswer } from '../../models/qa';\nimport classnames from 'classnames';\nimport { placeholders, handlePlaceholders } from '../../utils/placeholders';\nimport { RegistrationForm } from '../RegistrationForm/RegistrationForm';\nimport { IUser } from '../../models/user';\nimport { handleTextCategories } from '../../utils/handle-text-categories';\n\n\ninterface IQuestProp {\n    questions?: IQuestionsList;\n    currentQuestionId?: number;\n    registrationUser?: IUser | null;\n    currentCategories?: IUser['categories'];\n}\n\n\ninterface IQuestState {\n    userInput: string;\n    currentQuestionId: number;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestProp, 'questions' | 'currentQuestionId'> = (state) => ({\n    questions: state.questions.questions,\n    currentQuestionId: state.questions.currentQuestionId,\n    registrationUser: state.users.registrationUser,\n    currentCategories: state.users.currentCategories,\n});\n\n\nclass QuestComponent extends React.Component<IQuestProp, IQuestState> {\n\n    state: IQuestState = {\n        userInput: '',\n        currentQuestionId: 0\n    };\n\n\n    static getDerivedStateFromProps(props: IQuestProp, state: IQuestState): IQuestState | null {\n        if (props.currentQuestionId && props.currentQuestionId !== state.currentQuestionId) {\n            return { ...state, userInput: '' };\n        }\n        return null;\n    }\n\n\n    render() {\n\n        const currentQuestionId = this.props.currentQuestionId!;\n        const questions = this.props.questions!;\n        const regUser = this.props.registrationUser;\n\n        let currentQuestion: IQuestion|undefined|null;\n        if (!currentQuestionId) {\n            currentQuestion = questions!.filter(question => question ? question.isFirst : false)[0];\n        } else {\n            currentQuestion = questions!.filter(question => question ? question.id === currentQuestionId : false)[0];\n        }\n\n        if (!currentQuestion) {\n            return (\n                <h1>Первый вопрос не выбран или следующий вопрос \"{currentQuestionId}\" не найден!</h1>\n            );\n        }\n\n        const isFinal = currentQuestion.answers.filter(Boolean).length === 0;\n        const hasReg = currentQuestion.text.includes(placeholders.reg);\n        const hideAnswers = hasReg && (!regUser || !regUser.phone\n            || (!regUser.firstName && !regUser.lastName) || !regUser.login);\n\n        return (\n            <div>\n                {/* {currentQuestion.title && (\n                    <div className=\"Quest__title\">\n                        {currentQuestion.title}\n                    </div>\n                )} */}\n                <div className={classnames('Quest__text', 'Quest__ml')}>\n                    { this.renderQuestionText(currentQuestion) }\n                </div>\n                {!isFinal && !hideAnswers && (\n                    <ul className=\"Quest__answers\">\n                        {\n                            currentQuestion.answers.map(answer => {\n                                if (!answer || !answer.text || !answer.nextQuestion) {\n                                    return null;\n                                }\n\n                                return (\n                                    <li key={answer.id} className=\"Quest__action-container\">\n                                        { this.renderAnswer(answer) }\n                                    </li>\n                                );\n                            })\n                        }\n                    </ul>\n                )}\n                {isFinal && (\n                    <ul className=\"Quest__final-actions\">\n                        <li>\n                            <button type=\"button\"\n                                onClick={() => app.restartGame()}\n                            >\n                                Попробовать снова\n                            </button>\n                        </li>\n                        <li>\n                            <button type=\"button\"\n                                onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                            >\n                                Дать поиграть другим\n                            </button>\n                        </li>\n                    </ul>\n                )}\n            </div>\n        );\n    }\n\n\n    private renderAnswer(answer: IAnswer): React.ReactElement {\n        if (answer.needUserInput) {\n            return (\n                <form onSubmit={() => this.handleSelectedAnswer(answer)}>\n                    <div className=\"Quest__user-input-container\">\n                        <input type=\"text\"\n                            maxLength={100}\n                            value={this.state.userInput}\n                            onChange={(event) => this.setState({ userInput: event.target.value }) }\n                            className=\"std\"\n                            placeholder=\"Введите ответ здесь\"\n                        />\n                        { this.state.userInput && (\n                            <button type=\"submit\"\n                                className=\"Quest__user-input-submit\"\n                            >\n                                Отправить ответ\n                            </button>\n                        )}\n                    </div>\n                </form>\n            );\n        }\n\n        let text = answer.text;\n        if (answer.randomLine) {\n            const texts = text.split('\\n');\n            const randomTextIndex = Math.floor(Math.random() * texts.length);\n            text = texts[randomTextIndex];\n        }\n\n        return (\n            <button type=\"button\" onClick={() => this.handleSelectedAnswer(answer)}\n                className={classnames('Quest__action', 'Quest__ml')}\n            >\n                { this.processQAText(text) }\n            </button>\n        );\n    }\n\n\n    private handleSelectedAnswer(answer: IAnswer) {\n        let nextQuestion: number | undefined = answer.nextQuestion;\n\n        if (answer.needUserInput) {\n            const expectedValue = answer.text.toLowerCase().trim();\n            const inputValue = this.state.userInput.toLowerCase().trim();\n            nextQuestion = inputValue === expectedValue\n                ? answer.nextQuestion\n                : answer.incorrectUserInputNextQuestion;\n        }\n\n        app.nextQuestion(answer, nextQuestion || 0);\n    }\n\n\n    private renderQuestionText(question: IQuestion): React.ReactElement | string | Array<React.ReactElement | string> {\n        if (question.randomLineText) {\n            const texts = question.text.split('\\n').filter(Boolean);\n            const randomTextIndex = Math.floor(Math.random() * texts.length);\n            const text = texts[randomTextIndex];\n            return this.processQAText(text);\n        }\n\n        if (question.text.includes(placeholders.reg)) {\n            const textParts = question.text.split(placeholders.reg);\n            return [\n                this.processQAText(textParts[0].trim()),\n                <RegistrationForm key={1} className=\"Quest__registration\"/>,\n                this.processQAText(textParts[1].trim()),\n            ];\n        }\n\n        return this.processQAText(question.text);\n    }\n\n\n    private processQAText(text: string): string {\n        const afterPlaceholders = handlePlaceholders(text, this.props.registrationUser);\n        const afterCategories = handleTextCategories(afterPlaceholders, this.props.currentCategories);\n        return afterCategories;\n    }\n\n};\n\n\nexport const Quest = connect(mapStateToProps)(QuestComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { app, ROUTE_STATES } from '../../app';\nimport { Landing } from '../Landing/Landing';\nimport { AdminMenu } from '../AdminMenu/AdminMenu';\nimport { QuestionsManagement } from '../QuestionsManagement/QuestionsManagement';\nimport { Quest } from '../Quest/Quest';\n\n\ninterface IRoutingProps {\n    route?: ROUTE_STATES\n}\n\n\nconst mapStateToProps: IMapStateToProps<IRoutingProps, 'route'> = (state) => ({\n    route: state.routing.route\n});\n\n\nconst RoutingComponent: React.FC<IRoutingProps> = ({ route }) => {\n    switch (route) {\n        case app.ROUTE_STATES.QUEST:\n            return <Quest/>\n        case app.ROUTE_STATES.ADMIN_QUESTIONS_LIST:\n            return <QuestionsManagement/>;\n        case app.ROUTE_STATES.ADMIN_MAIN:\n            return <AdminMenu/>;\n        case app.ROUTE_STATES.MAIN:\n        default:\n            return <Landing/>;\n    }\n};\n\n\nexport const Routing = connect(mapStateToProps)(RoutingComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { AppHeader } from '../AppHeader/AppHeader';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { Routing } from './../Routing/Routing';\nimport { ROUTE_STATES } from '../../app';\nimport classnames from 'classnames';\n\n\ninterface IAppProps {\n    route?: ROUTE_STATES,\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppProps, 'route'> = (state) => ({\n    route: state.routing.route,\n});\n\n\nconst AppComponent: React.FC<IAppProps> = ({ route }) => {\n    const conditionalClasses = {\n        '_header_small': route !== ROUTE_STATES.MAIN,\n        '_quest-in-progress': route === ROUTE_STATES.QUEST,\n    };\n\n    return (\n        <div className={classnames('App', conditionalClasses)}>\n            <div className=\"App__container\">\n                <AppHeader className=\"App__header\"/>\n                <Routing/>\n            </div>\n        </div>\n    );\n};\n\n\nexport const App = connect(mapStateToProps)(AppComponent);\n","import { combineReducers } from 'redux';\nimport { IAppState } from './state';\nimport { fullScreenReducer } from './full-screen/full-screen-reducer';\nimport { routingReducer } from './routing/routing-reducer';\nimport { questionsReducer } from './questions/questions-reducer';\nimport { usersReducer } from './users/users-reducer';\n\n\nexport const rootReducer = combineReducers<IAppState>({\n    fullScreen: fullScreenReducer,\n    routing: routingReducer,\n    questions: questionsReducer,\n    users: usersReducer,\n});\n","import { fullScreenInitialState, IFullScreenState } from './full-screen/full-screen-state';\nimport { routeInitialState, IRoutingState } from './routing/routing-state';\nimport { questionsInitialState, IQuestionsState } from './questions/questions-state';\nimport { usersInitialState, IUsersState } from './users/users-state';\n\n\nexport interface IAppState {\n    fullScreen: IFullScreenState,\n    routing: IRoutingState,\n    questions: IQuestionsState,\n    users: IUsersState,\n};\n\n\nexport const initialState: IAppState = {\n    fullScreen: fullScreenInitialState,\n    routing: routeInitialState,\n    questions: questionsInitialState,\n    users: usersInitialState,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App/App';\nimport { Provider } from 'react-redux'\nimport { configureStore, IAppStore } from './redux/store';\nimport { app } from './app';\n\nconst store = configureStore() as IAppStore;\n\napp.setStore(store);\n\nconst appElement = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n);\n\ndocument.title = 'OK Mobius 2019';\n\nReactDOM.render(appElement, document.getElementById('root'));\n","import { createStore, Store, Action } from 'redux';\nimport { rootReducer } from './root-reducer';\nimport { initialState, IAppState } from './state';\n\n\nexport interface IAction<TPayload> extends Action<string> {\n    payload: TPayload;\n}\n\n\n// any type does not matter this case\nexport type IAppStore = Store<IAppState, IAction<any>>;\n\n\nexport function configureStore() {\n  return createStore(rootReducer, initialState);\n}\n"],"sourceRoot":""}