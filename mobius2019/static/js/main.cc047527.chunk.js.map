{"version":3,"sources":["redux/create-reducer.ts","redux/create-do-actions.ts","redux/full-screen/full-screen-state.ts","app/route-states.ts","redux/full-screen/full-screen-reducer.ts","redux/routing/routing-state.ts","redux/routing/routing-reducer.ts","utils/storage.ts","redux/questions/questions-state.ts","utils/extend-state.ts","redux/questions/questions-reducer.ts","utils/file.ts","redux/do-actions.ts","app/index.ts","app/app.ts","components/AppHeader/AppHeader.tsx","components/Landing/Landing.tsx","utils/text.ts","components/FileExport/FileExport.tsx","components/FileImport/FileImport.tsx","components/AdminMenu/AdminMenu.tsx","components/QuestionEdit/QuestionEdit.tsx","utils/clone-question.ts","components/QuestionsManagement/QuestionsManagement.tsx","components/Quest/Quest.tsx","components/Routing/Routing.tsx","components/App/App.tsx","redux/root-reducer.ts","redux/state.ts","index.tsx","redux/store.ts"],"names":["createReducer","reducerObj","initialState","state","action","actionType","type","reducer","createDoActions","_len","arguments","length","actionsNamesList","Array","_key","reduce","memo","actionName","store","payload","dispatch","ROUTE_STATES","fullScreenInitialState","inFullscreen","fullScreenActions","fullScreenReducer","TOGGLE","routeInitialState","route","MAIN","routingActions","routingReducer","GO_TO","QUESTIONS_KEY","questionsInitialState","questions","serializedQuestions","window","localStorage","getItem","JSON","parse","e","console","error","restoreQuestions","currentQuestionId","extendState","toAddOrKey","value","toAdd","Object","defineProperty","objectSpread","FILE_TYPES","questionsActions","questionsReducer","ADD","question","id","concat","toConsumableArray","DELETE","questionToDelete","map","UPDATE","questionToUpdate","resetIsFirst","isFirst","GO_TO_QUESTION","REPLACE","doActions","fullScreen","routing","app","App","classCallCheck","this","_store","storeUnsubscriber","storedQuestions","createClass","key","_this","unsubscribeStore","subscribe","getState","storeQuestions","questionId","stateQuestions","stringify","setItem","get","sf","AppHeaderComponent","toggleState","toggleFullscreen","_this2","_this$props","props","className","isFullScreen","react_default","a","createElement","classnames","onClick","toggleFullScreen","on","off","_this3","toggle","catch","log","React","Component","AppHeader","connect","Landing","goToRoute","QUEST","ADMIN_MAIN","padStart","item","strLength","symbol","getFileObject","params","releaseFileObject","fileObjectUrl","charset","mimeType","fileType","data","Blob","content","URL","createObjectURL","revokeObjectURL","getFileName","section","extension","timestamp","now","Date","y","getFullYear","m","getMonth","d","getDate","H","getHours","M","getMinutes","S","getSeconds","getTimestamp","FileExport","fileName","buttonText","_this$state","prepareFile","href","download","releaseStateFileObject","fileDescription","getFileDescription","setState","stringifyContent","nameSection","toLowerCase","FileImport","onChange","event","onFileSelected","files","target","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","readFileAsString","then","_this3$props","parseJson","onContentRead","name","AdminMenu","_ref","ADMIN_QUESTIONS_LIST","FileImport_FileImport","updateQuestions","alert","FileExport_FileExport","QuestionEdit","_React$Component","_getPrototypeOf2","args","possibleConstructorReturn","getPrototypeOf","call","apply","isNew","hideTextError","inherits","qs","hasAnswers","answers","filter","Boolean","isFinal","mainHtmlId","titleHtmlId","textHtmlId","isFirstHtmlId","rootId","getRootId","react","onSubmit","checked","updateQuestionProp","htmlFor","title","placeholder","text","answerOrNull","index","answer","answerHtmlId","answerGotoHtmlId","updateAnswerProp","deleteAnswer","nextQuestion","parseInt","addAnswer","onDelete","propName","propValue","originalAnswer","updatedAnswer","preventDefault","onSave","answerIndex","stateAnswers","newAnswer","propQuestion","stateQuestion","QuestionsManagement","QuestionEdit_QuestionEdit_QuestionEdit","addQuestion","updateQuestion","deleteQuestion","Quest","currentQuestion","Routing","Quest_Quest","QuestionsManagement_QuestionsManagement","AdminMenu_AdminMenu","Landing_Landing","AppHeader_AppHeader","rootReducer","combineReducers","createStore","setStore","appElement","es","App_App_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc047527.chunk.js","sourcesContent":["import { Reducer } from 'redux'\nimport { IAction } from './store';\n\n\n// { actionName: (state, action) => state }\nexport type IReducerObj<TState, TActionsToPayloads> = {\n    [K in keyof TActionsToPayloads]: Reducer<TState, IAction<TActionsToPayloads[K]>>\n}\n\n\nexport function createReducer<TActionsToPayload, TState>\n        (reducerObj: IReducerObj<TState, TActionsToPayload>, initialState: TState)\n{\n    return (state: TState | undefined, action: IAction<any>) => {\n        if (!state) {\n            return initialState;\n        }\n\n        const actionType: keyof TActionsToPayload = action.type as keyof TActionsToPayload;\n        const reducer = (reducerObj as any)[actionType] as Reducer<TState, IAction<any>>;\n        if (reducer) {\n            return reducer(state!, action) as TState;\n        }\n        return state!;\n    };\n}\n","import { IAppStore } from './store';\n\n\ntype IDoActionsWithPayload<TActionsToPayload> = {\n    [K in keyof TActionsToPayload]: (store: IAppStore | null, payload: TActionsToPayload[K]) => void;\n}\n\n\nexport function createDoActions<TActionsToPayload>(...actionsNamesList: Array<keyof TActionsToPayload>): IDoActionsWithPayload<TActionsToPayload> {\n    return actionsNamesList.reduce((memo, actionName) => {\n        memo[actionName] = (store, payload) => {\n            if (!store) {\n                return;\n            }\n\n            store.dispatch({\n                type: actionName as string,\n                payload\n            });\n        };\n        return memo;\n    }, {} as IDoActionsWithPayload<TActionsToPayload>);\n}\n","export interface IFullScreenState {\n    inFullscreen: boolean\n};\n\n\nexport const fullScreenInitialState: IFullScreenState = {\n    inFullscreen: false\n};\n","export enum ROUTE_STATES {\n    MAIN = 'MAIN',\n    ADMIN_MAIN = 'ADMIN_MAIN',\n    ADMIN_QUESTIONS_LIST = 'ADMIN_QUESTIONS_LIST',\n    QUEST = 'QUEST',\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IFullScreenState, fullScreenInitialState } from './full-screen-state';\n\n\nexport interface IFullScreenActionsToPayloads {\n    TOGGLE: void\n}\n\n\nexport const fullScreenActions = createDoActions<IFullScreenActionsToPayloads>('TOGGLE');\n\n\nconst reducerObj: IReducerObj<IFullScreenState, IFullScreenActionsToPayloads> = {\n    'TOGGLE': (state) => ({\n        inFullscreen: !state!.inFullscreen\n    }),\n};\n\n\nexport const fullScreenReducer = createReducer(reducerObj, fullScreenInitialState);\n","import { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingState {\n    route: ROUTE_STATES;\n};\n\n\nexport const routeInitialState: IRoutingState = {\n    route: ROUTE_STATES.MAIN\n};\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IRoutingState, routeInitialState } from './routing-state';\nimport { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingActionsToPayloads {\n    GO_TO: ROUTE_STATES;\n}\n\n\nexport const routingActions = createDoActions<IRoutingActionsToPayloads>('GO_TO');\n\n\nconst reducerObj: IReducerObj<IRoutingState, IRoutingActionsToPayloads> = {\n    'GO_TO': (state, action) => ({\n        route: action.payload\n    }),\n};\n\n\nexport const routingReducer = createReducer(reducerObj, routeInitialState);\n","import { IQuestionsList } from '../models/qa';\n\n\nconst QUESTIONS_KEY = 'questions';\n\n\nexport function storeQuestions(questions: IQuestionsList) {\n    const serializedQuestions = JSON.stringify(questions);\n    window.localStorage.setItem(QUESTIONS_KEY, serializedQuestions);\n}\n\n\nexport function restoreQuestions(): IQuestionsList | null {\n    const serializedQuestions = window.localStorage.getItem(QUESTIONS_KEY);\n    if (!serializedQuestions) {\n        return null;\n    }\n    try {\n        return JSON.parse(serializedQuestions);\n    } catch (e) {\n        console.error('serialized questions', serializedQuestions);\n        console.error('while parsing serialized questions', e);\n    }\n    return null;\n}\n","import { IQuestionsList } from '../../models/qa';\nimport { restoreQuestions } from '../../utils/storage';\n\n\nexport interface IQuestionsState {\n    questions: IQuestionsList;\n    currentQuestionId: number;\n};\n\n\nexport const questionsInitialState: IQuestionsState = {\n    questions: restoreQuestions() || [],\n    currentQuestionId: 0,\n};\n","export function extendState<T>(state: T, toAdd: Partial<T>): T;\nexport function extendState<T, K extends keyof T>(state: T, key: K, value: T[K]): T\n\nexport function extendState<T, K extends keyof T>(state: T, toAddOrKey: Partial<T> | K, value?: T[K]): T {\n    const toAdd = arguments.length === 3\n        ? ({ [toAddOrKey as K]: value } as any) as Partial<T>\n        : toAddOrKey as Partial<T>;\n    return {\n        ...state,\n        ...toAdd\n    };\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IQuestionsState, questionsInitialState } from './questions-state';\nimport { IQuestion, INewQuestion, IQuestionsList } from '../../models/qa';\nimport { extendState } from '../../utils/extend-state';\n\n\nexport interface IQuestionsActionsToPayloads {\n    ADD: INewQuestion,\n    DELETE: IQuestion,\n    UPDATE: IQuestion,\n    REPLACE: IQuestionsList,\n    GO_TO_QUESTION: number,\n}\n\n\nexport const questionsActions = createDoActions<IQuestionsActionsToPayloads>(\n    'ADD', 'DELETE', 'UPDATE', 'REPLACE', 'GO_TO_QUESTION',\n);\n\n\nconst reducerObj: IReducerObj<IQuestionsState, IQuestionsActionsToPayloads> = {\n    'ADD': (state, action) => {\n        // INewQuestion will become IQuestion after 'id' will be added.\n        const question = { ...action.payload } as IQuestion;\n        const questions = state!.questions;\n        question.id = questions.length + 1;\n        return extendState(state!, 'questions', [...questions, question]);\n    },\n    'DELETE': (state, action) => {\n        const questionToDelete = action.payload;\n        const questions = state!.questions.map(question =>\n            question && question.id !== questionToDelete.id ? question : null);\n        return extendState(state!, 'questions', questions);\n    },\n    'UPDATE': (state, action) => {\n        const questionToUpdate = action.payload;\n        const resetIsFirst = questionToUpdate.isFirst;\n        const questions = state!.questions.map(question => {\n            if (!question) {\n                return null;\n            }\n            if (resetIsFirst) {\n                question = { ...question, isFirst: false };\n            }\n            return question.id === questionToUpdate.id ? questionToUpdate : question;\n        });\n        return extendState(state!, 'questions', questions);\n    },\n    'GO_TO_QUESTION': (state, action) => {\n        return extendState(state!, 'currentQuestionId', action.payload);\n    },\n    'REPLACE': (state, action) => {\n        return extendState(state!, 'questions', action.payload);\n    },\n};\n\n\nexport const questionsReducer = createReducer(reducerObj, questionsInitialState);\n","import { padStart } from './text';\n\nexport enum FILE_TYPES {\n    JSON = 'JSON',\n    CSV = 'CSV',\n}\n\n\nconst mimeTypes: { [key in FILE_TYPES]: string } = {\n    JSON: 'application/json',\n    CSV: 'text/csv',\n};\n\n\nexport interface IFileDescription {\n    content: any;\n    nameSection: string; // имя в файле без timestamp и расширения\n    type: FILE_TYPES;\n}\n\n\n/**\n * Выгружает пользователю файл.\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n * @param {object} params\n * @param {string} params.content\n * @param {string} params.type MIME-type.\n * @param {string} [params.charset='utf-8']\n * @param {object} [params.fileObject] Ранее сгенерированный объект для выгрузки этого файла.\n * @returns {File|Blob} See URL.createObjectURL API.\n */\nexport function getFileObject(params: {\n    content: string,\n    fileType: FILE_TYPES,\n    charset?: string,\n    fileObjectUrl?: string\n}): string {\n  releaseFileObject(params.fileObjectUrl);\n\n  const charset = params.charset || 'utf-8';\n  const mimeType = FILE_TYPES[params.fileType];\n  const type = `data:${mimeType};charset=${charset}`;\n  const data = new Blob([params.content], { type });\n  const fileObject = window.URL.createObjectURL(data);\n  return fileObject;\n}\n\n/**\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n */\nexport function releaseFileObject(fileObjectUrl?: string) {\n  if (fileObjectUrl) {\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    window.URL.revokeObjectURL(fileObjectUrl);\n  }\n}\n\n\n/**\n * Запрашивает у пользователю разделитель для значений в CSV.\n * @param {string} [defaultDelimiter=';']\n * @returns {string}\n */\n/*\nexport function getCSVDelimiter(defaultDelimiter = ';') {\n  const userDelimiter = prompt(`Введите разделитель для CSV.\\n`\n    + `По умолчанию будет использован символ \"${defaultDelimiter}\".`, defaultDelimiter);\n  return userDelimiter || defaultDelimiter;\n}\n*/\n\n\n/**\n * Читает с диска файл.\n * @param {File} file Объект File, который может быть получен из input/type=file.\n * @returns {Promise<string>}\n */\nexport function readFileAsString(file: File): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event: ProgressEvent) => {\n            const content = (event.target as any).result;\n            resolve(content);\n        };\n\n        reader.onerror = (error) => {\n            reject(error);\n        };\n\n        reader.readAsText(file);\n    });\n}\n\n\n/**\n * Получение timestamp для использования в именах файлов, например.\n * @returns {string}\n */\nfunction getTimestamp() {\n    const now = new Date();\n    const y = now.getFullYear();\n    const m = padStart(now.getMonth() + 1, 2, '0');\n    const d = padStart(now.getDate(), 2, '0');\n    const H = padStart(now.getHours(), 2, '0');\n    const M = padStart(now.getMinutes(), 2, '0');\n    const S = padStart(now.getSeconds(), 2, '0');\n    return `${y}-${m}-${d}--${H}-${M}-${S}`;\n}\n\n\nexport function getFileName(section: string, extension?: string): string {\n    const timestamp = getTimestamp();\n    const fileName = extension\n        ? `${section}-${timestamp}.${extension}`\n        : `${timestamp}-${section}`;\n    return fileName;\n}\n","import { fullScreenActions } from './full-screen/full-screen-reducer';\nimport { routingActions } from './routing/routing-reducer';\nimport { questionsActions } from './questions/questions-reducer';\n\n\nexport const doActions = {\n    fullScreen: fullScreenActions,\n    routing: routingActions,\n    questions: questionsActions,\n};\n","import { App } from './app';\n\nexport const app = new App();\n\nexport * from './route-states';\n","import { Unsubscribe } from 'redux';\nimport { IAppStore } from '../redux/store';\nimport { IAppState } from '../redux/state';\nimport { doActions } from '../redux/do-actions';\nimport { ROUTE_STATES } from './route-states';\nimport { IQuestion, IQuestionsList } from '../models/qa';\nimport { storeQuestions } from '../utils/storage';\n\nexport class App {\n\n    private _store: IAppStore | null = null;\n\n    private storeUnsubscriber: Unsubscribe | null = null;\n\n    private storedQuestions: IQuestionsList = [];\n\n    private get state(): IAppState {\n        return this._store!.getState();\n    }\n\n\n    ROUTE_STATES = ROUTE_STATES;\n\n\n    setStore(store: IAppStore) {\n        this._store = store;\n        this.unsubscribeStore();\n        if (store) {\n            store.subscribe(() => {\n                const state = store.getState();\n                this.storeQuestions(state);\n            });\n        }\n    }\n\n\n    toggleFullscreen() {\n        doActions.fullScreen.TOGGLE(this._store);\n    }\n\n\n    goToRoute(route: ROUTE_STATES) {\n        doActions.routing.GO_TO(this._store, route);\n    }\n\n\n    addQuestion(question: IQuestion) {\n        doActions.questions.ADD(this._store, question);\n    }\n\n\n    deleteQuestion(question: IQuestion) {\n        doActions.questions.DELETE(this._store, question);\n    }\n\n\n    updateQuestion(question: IQuestion) {\n        doActions.questions.UPDATE(this._store, question);\n    }\n\n\n    nextQuestion(questionId: number) {\n        doActions.questions.GO_TO_QUESTION(this._store, questionId);\n    }\n\n    updateQuestions(questions: IQuestionsList) {\n        doActions.questions.REPLACE(this._store, questions);\n    }\n\n\n    private unsubscribeStore() {\n        if (this.storeUnsubscriber) {\n            this.storeUnsubscriber();\n            this.storeUnsubscriber = null;\n        }\n    }\n\n\n    private storeQuestions(state: IAppState) {\n        const stateQuestions = state.questions.questions;\n        if (stateQuestions !== this.storedQuestions) {\n            this.storedQuestions = stateQuestions;\n            storeQuestions(stateQuestions);\n        }\n    }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AppHeader.css';\nimport classnames from 'classnames';\nimport { app } from '../../app';\nimport * as screenfull from \"screenfull\";\nimport {Screenfull} from \"screenfull\";\nimport { IMapStateToProps } from '../../redux/connect';\n\n// https://github.com/sindresorhus/screenfull.js/issues/126#issuecomment-488796645\nlet sf = screenfull as Screenfull;\n\n\ninterface IAppHeaderProps {\n    className: string;\n    isFullScreen?: boolean;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppHeaderProps, 'isFullScreen'> = (state) => ({\n    isFullScreen: state.fullScreen.inFullscreen\n});\n\n\nclass AppHeaderComponent extends React.Component<IAppHeaderProps> {\n\n    toggleState = () => app.toggleFullscreen();\n\n\n    render() {\n        const { className, isFullScreen } = this.props;\n        return (\n            <div className={classnames('AppHeader', className)}>\n                { !isFullScreen && (\n                    <button type=\"button\" onClick={() => this.toggleFullScreen()} className=\"AppHeader__fullscreen\">\n                        Развернуть\n                    </button>\n                )}\n            </div>\n        );\n    }\n\n\n    componentDidMount() {\n        sf.on('change', this.toggleState);\n    }\n\n\n    componentWillUnmount() {\n        sf.off('change', this.toggleState);\n    }\n\n\n    toggleFullScreen() {\n        sf.toggle()\n            .catch(error => console.log(\n                `while toggling fullsreen state, current state is ${this.props.isFullScreen}`,\n                error\n            ));\n    }\n\n}\n\n\nexport const AppHeader = connect(mapStateToProps)(AppHeaderComponent);\n","import React from 'react';\nimport './Landing.css';\nimport { app } from '../../app';\n\n\ninterface ILandingProps {\n}\n\n\nconst LandingComponent: React.FC<ILandingProps> = () => {\n    return (\n        <div>\n            <div>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.QUEST)}>\n                    Начать\n                </button>\n            </div>\n            <div className=\"Landing__goToAdmin\">\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.ADMIN_MAIN)}>\n                    Администрирование\n                </button>\n            </div>\n        </div>\n    );\n};\n\n\nexport const Landing = LandingComponent;\n","/**\n * Дополняет заданными символами слева до нужной длины строки.\n * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n */\nexport function padStart(item: string|number, strLength: number, symbol: string): string {\n    const strItem = '' + item;\n    return strItem.padStart(strLength, symbol);\n}\n","import React from 'react';\nimport './FileExport.css';\nimport { IFileDescription, releaseFileObject, getFileObject, getFileName, FILE_TYPES } from '../../utils/file';\n\n\ninterface IFileExportProps {\n    getFileDescription: () => IFileDescription;\n    buttonText: string;\n}\n\n\ninterface IFileExportState {\n    fileObjectUrl: string;\n    fileName: string;\n}\n\n\nclass FileExportComponent extends React.Component<IFileExportProps, IFileExportState> {\n\n    state: IFileExportState = {\n        fileObjectUrl: '',\n        fileName: ''\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        const { fileObjectUrl, fileName } = this.state;\n\n        return (\n            <div>\n                <button type=\"button\"\n                    onClick={() => this.prepareFile()}\n                    className=\"FileExport__button\"\n                >\n                    { buttonText }\n                </button>\n                { fileObjectUrl && (\n                    <a href={fileObjectUrl} download={fileName}\n                        className=\"FileExport__button\"\n                    >\n                        Скачать файл\n                    </a>\n                )}\n            </div>\n        );\n    }\n\n\n    private prepareFile() {\n        this.releaseStateFileObject();\n\n        const fileDescription = this.props.getFileDescription();\n        this.setState({\n            fileObjectUrl: getFileObject({\n                content: this.stringifyContent(fileDescription.content),\n                fileType: fileDescription.type\n            }),\n            fileName: getFileName(fileDescription.nameSection, FILE_TYPES[fileDescription.type].toLowerCase())\n        });\n    }\n\n\n    private releaseStateFileObject() {\n        const { fileObjectUrl } = this.state;\n        if (fileObjectUrl) {\n            releaseFileObject(fileObjectUrl);\n        }\n    }\n\n\n    private stringifyContent(content: any): string {\n        if (!content) {\n            return '';\n        }\n        if (typeof content === 'object') {\n            // readable json\n            return JSON.stringify(content, null, 4);\n        }\n        return JSON.stringify(content);\n    }\n\n};\n\n\nexport const FileExport = FileExportComponent;\n","import React, { ChangeEvent } from 'react';\nimport './FileImport.css';\nimport { readFileAsString } from '../../utils/file';\n\n\ninterface IFileImportProps {\n    buttonText: string;\n    onContentRead: (content: any) => void;\n    parseJson?: boolean;\n}\n\n\ninterface IFileImportState {\n}\n\n\nclass FileImportComponent extends React.Component<IFileImportProps, IFileImportState> {\n\n    state: IFileImportState = {\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        return (\n            <label className=\"FileImport\">\n                { buttonText }\n                <input type=\"file\"\n                    className=\"FileImport_import\"\n                    onChange={(event) => this.onFileSelected(event)}\n                />\n            </label>\n        );\n    }\n\n\n    private onFileSelected(event: ChangeEvent<HTMLInputElement>) {\n        const files = event.target.files;\n        const file = files && files[0];\n        if (file) {\n            readFileAsString(file)\n                .then(content => {\n                    const { parseJson, onContentRead } = this.props;\n\n                    if (!parseJson) {\n                        return onContentRead(content);\n                    }\n\n                    const json = JSON.parse(content);\n                    onContentRead(json);\n                })\n                .catch(error => console.error(`while reading file ${file.name}`, error));\n        }\n    }\n\n};\n\n\nexport const FileImport = FileImportComponent;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AdminMenu.css';\nimport { app } from '../../app';\nimport { IQuestionsList } from '../../models/qa';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { FileExport } from '../FileExport/FileExport';\nimport { FileImport } from '../FileImport/FileImport';\nimport { FILE_TYPES } from '../../utils/file';\n\n\ninterface IAdminMenuProps {\n    questions?: IQuestionsList;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAdminMenuProps, 'questions'> = (state) => ({\n    questions: state.questions.questions\n});\n\n\nconst AdminMenuComponent: React.FC<IAdminMenuProps> = ({ questions }) => {\n    return (\n        <ul className=\"AdminMenu__menu\">\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.ADMIN_QUESTIONS_LIST)}>\n                    Управление вопросами\n                </button>\n            </li>\n            <li>\n                <FileImport buttonText=\"Прочитать вопросы из файла\"\n                    parseJson={true}\n                    onContentRead={(questions: IQuestionsList) => {\n                        app.updateQuestions(questions);\n                        window.alert('Вопрос прочитаны успешно!');\n                    }}\n                />\n            </li>\n            <li>\n                <FileExport buttonText=\"Скачать вопросы\"\n                    getFileDescription={() => ({\n                        type: FILE_TYPES.JSON,\n                        content: questions,\n                        nameSection: 'questions'\n                    })}\n                />\n            </li>\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}>\n                    На главную\n                </button>\n            </li>\n        </ul>\n    );\n};\n\n\nexport const AdminMenu = connect(mapStateToProps)(AdminMenuComponent);\n","import * as React from 'react';\nimport { IQuestion, IAnswer, IQuestionsList } from '../../models/qa';\nimport './QuestionEdit.css';\nimport classnames from 'classnames';\nimport { cloneQuestion } from '../../utils/clone-question';\n\n\ninterface IQuestionEditProps {\n    question?: IQuestion;\n    qs: IQuestionsList;\n    onSave: (question: IQuestion) => void;\n    onDelete?: (question: IQuestion) => void;\n    className?: string;\n}\n\n\ninterface IQuestionEditState {\n    question?: IQuestion;\n    isNew: boolean;\n    hideTextError: boolean;\n}\n\n\nfunction getNewQuestion(): IQuestion {\n    return {\n        id: 0,\n        text: '',\n        title: '',\n        answers: []\n    }\n}\n\n\nexport class QuestionEdit extends React.Component<IQuestionEditProps, IQuestionEditState> {\n\n    state: IQuestionEditState = {\n        isNew: true,\n        hideTextError: false,\n    };\n\n\n    static getDerivedStateFromProps(props: IQuestionEditProps, state: IQuestionEditState): IQuestionEditState | null {\n        const propQuestion = props.question;\n        const stateQuestion = state.question;\n\n        if (propQuestion) {\n            if (stateQuestion && stateQuestion.id === propQuestion.id) {\n                // update isFirst\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: {\n                    ...stateQuestion,\n                    isFirst: propQuestion.isFirst\n                }\n                }\n            } else {\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: cloneQuestion(propQuestion)\n                };\n            }\n        } else if (stateQuestion) {\n            return null;\n        }\n\n        return {\n            isNew: true,\n            hideTextError: true,\n            question: getNewQuestion()\n        };\n    }\n\n\n    render() {\n        const { question, isNew, hideTextError } = this.state;\n        const { qs, className } = this.props;\n        const hasAnswers = question!.answers.filter(Boolean).length > 0;\n        const isFinal = !hasAnswers;\n\n        const mainHtmlId = `QuestionEdit__${question!.id}`;\n        const titleHtmlId = `${mainHtmlId}__title`;\n        const textHtmlId = `${mainHtmlId}__text`;\n        const isFirstHtmlId = `${mainHtmlId}__isFirst`;\n\n        const rootId = this.getRootId(this.props.question ? this.props.question.id : 0);\n\n        return (\n            <div className={classnames('QuestionEdit', className)} id={rootId}>\n                <form onSubmit={(event) => this.onSubmit(question!, event)}>\n                    <div className={classnames('QuestionEdit__indented', 'QuestionEdit__row')}>\n                        <b>\n                            {isNew\n                                ? 'Новый вопрос'\n                                : isFinal\n                                    ? `Финал, #${question!.id}`\n                                    : `Вопрос, #${question!.id}`\n                            }\n                        </b>\n                        {!isFinal && (\n                            <div className={classnames('QuestionEdit__wideItem', 'QuestionEdit__checkboxContainer')}>\n                                <label>\n                                    <input type=\"checkbox\"\n                                        name={isFirstHtmlId}\n                                        checked={question!.isFirst}\n                                        onChange={(event) => this.updateQuestionProp('isFirst', event.target.checked)}\n                                        className={'QuestionEdit__checkbox'}\n                                    />\n                                    первый вопрос\n                                </label>\n                            </div>\n                        )}\n                    </div>\n                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={titleHtmlId}>\n                            Заголовок\n                        </label>\n                        <input name={titleHtmlId}\n                            type=\"text\"\n                            id={titleHtmlId}\n                            value={question!.title}\n                            onChange={(event) => this.updateQuestionProp('title', event.target.value)}\n                            className=\"QuestionEdit__wideItem\"\n                            placeholder=\"Необязательно\"\n                        />\n                    </div>\n                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={textHtmlId}>\n                            Текст\n                        </label>\n                        <textarea name={textHtmlId}\n                            id={textHtmlId}\n                            className={classnames('QuestionEdit__wideItem', 'QuestionEdit__bigEditor')}\n                            value={question!.text}\n                            onChange={(event) => this.updateQuestionProp('text', event.target.value)}\n                            placeholder=\"Заполните текст вопроса!\"\n                        ></textarea>\n                    </div>\n\n                    {\n                        !question!.text && !hideTextError && (\n                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                Заполните текст вопроса!\n                            </div>\n                        )\n                    }\n\n                    {\n                        hasAnswers && (\n                            <div className={'QuestionEdit__indented'}>\n                                Ответы:\n                            </div>\n                        )\n                    }\n\n                    {\n                        question!.answers.map((answerOrNull, index) => {\n                            if (!answerOrNull) {\n                                return null;\n                            }\n\n                            const answer = answerOrNull!;\n                            const answerHtmlId = `${mainHtmlId}_answer_${answer.id}`;\n                            const answerGotoHtmlId = `${answerHtmlId}_goto`;\n\n                            return (\n                                <div className={'QuestionEdit__indented'} key={answer.id}>\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')} key={`${answer.id}_text`}>\n                                        <textarea\n                                            name={answerHtmlId}\n                                            id={answerHtmlId}\n                                            value={answer.text}\n                                            onChange={(event) => this.updateAnswerProp(answer, 'text', event.target.value)}\n                                            className={classnames('QuestionEdit__wideItem', 'QuestionEdit__bigEditor')}\n                                            placeholder=\"Заполните текст ответа!!!\"\n                                        ></textarea>\n                                        <button type=\"button\" onClick={() => this.deleteAnswer(index)}>\n                                            Удалить\n                                        </button>\n                                    </div>\n                                    {\n                                        !answer.text && (\n                                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                                Заполните текст ответа!!!\n                                            </div>\n                                        )\n                                    }\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented', 'QuestionEdit__toQuestion')} key={`${answer.id}_goto`}>\n                                        <label htmlFor={answerGotoHtmlId}>\n                                            Перейти к\n                                        </label>\n                                        <div className={'QuestionEdit__wideItem'}>\n                                            <select id={answerGotoHtmlId}\n                                                className={'QuestionEdit__gotoQuestionField'}\n                                                value={answer.nextQuestion}\n                                                name={answerGotoHtmlId}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'nextQuestion', parseInt(event.target.value, 10))}\n                                            >\n                                                {!answer.nextQuestion && (\n                                                    <option value=\"0\">\n                                                        Выберите точку перехода!!!\n                                                    </option>\n                                                )}\n                                                {\n                                                    qs.map(question => question && (\n                                                        <option key={question.id} value={question.id}>\n                                                            {question.title || question.text}\n                                                        </option>\n                                                    ))\n                                                }\n                                            </select>\n                                            <div>\n                                                <a href={`#${this.getRootId(answer.nextQuestion)}`}>\n                                                    {answer.nextQuestion ? 'к вопросу' : 'создать новый'}\n                                                </a>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    {\n                                        !answer.nextQuestion && (\n                                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error', 'QuestionEdit__toQuestion')}>\n                                                Выберите точку перехода!!!\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                            );\n                        })\n                    }\n\n                    <div className={'QuestionEdit__indented'}>\n                        <button type=\"button\" onClick={() => this.addAnswer()}>\n                            Добавить ответ\n                        </button>\n                    </div>\n\n                    <div className={'QuestionEdit__indented'}>\n                        {isNew && (\n                            <button type=\"submit\" className={'QuestionEdit__submit'}>\n                                Добавить этот вопрос\n                            </button>\n                        )}\n                        {\n                            this.props.onDelete && (\n                                <button type=\"button\" className={'QuestionEdit__delete'} onClick={() => this.props.onDelete!(question!)}>\n                                    Удалить вопрос\n                                </button>\n                            )\n                        }\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n\n    private updateQuestionProp<K extends keyof IQuestion>(propName: K, propValue: IQuestion[K]) {\n        const question = { ...this.state.question, [propName]: propValue } as IQuestion;\n        this.setState({\n            question,\n            hideTextError: false\n        });\n\n        if (!this.state.isNew) {\n            this.onSubmit(question);\n        }\n    }\n\n\n    private updateAnswerProp<K extends keyof IAnswer>(originalAnswer: IAnswer, propName: K, propValue: IAnswer[K]) {\n        const updatedAnswer = { ...originalAnswer, [propName]: propValue } as IAnswer;\n        const answers = this.state.question!.answers.map(answer => answer && answer.id === originalAnswer.id ? updatedAnswer : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private onSubmit(question: IQuestion, event?: React.BaseSyntheticEvent) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (!question.text) {\n            return;\n        }\n\n        if (this.state.isNew) {\n            if (event) {\n                this.props.onSave(question);\n                this.setState({\n                    hideTextError: true,\n                    question: getNewQuestion()\n                });\n            }\n        } else {\n            this.props.onSave(question);\n        }\n    }\n\n\n    private deleteAnswer(answerIndex: number) {\n        const answers = this.state.question!.answers.map((answer, index) => !answer || index === answerIndex ? null : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private addAnswer() {\n        const stateAnswers = this.state.question!.answers;\n        const newAnswer: IAnswer = {\n            id: stateAnswers.length + 1,\n            text: '',\n            nextQuestion: 0,\n        };\n        const answers = [...stateAnswers, newAnswer];\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private getRootId(questionId?: number): string {\n        const baseId = 'QuestionEdit_root_';\n        return questionId ? `${baseId}_${questionId}` : `${baseId}_new`;\n    }\n\n}\n","import { IQuestion } from '../models/qa';\n\nexport function cloneQuestion(question: IQuestion): IQuestion {\n    return {\n      ...question,\n      answers: question.answers.map(answer => answer ? { ...answer } : null)\n    };\n  }\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './QuestionsManagement.css';\nimport { app } from '../../app';\nimport { QuestionEdit } from '../QuestionEdit/QuestionEdit';\nimport { IQuestionsList } from '../../models/qa';\n\n\ninterface IQuestionsManagementProps {\n    questions?: IQuestionsList;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestionsManagementProps, 'questions'> = (state) => ({\n    questions: state.questions.questions\n});\n\n\nconst QuestionsManagementComponent: React.FC<IQuestionsManagementProps> = (props) => {\n    const qs = props.questions!;\n\n    return (\n        <div>\n            <div>\n                Задайте вопросы квеста!\n                <br />\n                Вопросы без ответов считаются финальными состояними квеста!\n                <br />\n                Ответы без текста или без указания цели перехода отображены не будут!\n                <br />\n                При удалении вопросов или ответов номера остальных вопросов/ответов не меняются!\n            </div>\n\n            <QuestionEdit\n                className=\"QuestionsManagement__question\"\n                onSave={(question) => app.addQuestion(question)}\n                qs={qs}\n            />\n\n            {\n                qs.map(question => question && (\n                    <QuestionEdit\n                        className=\"QuestionsManagement__question\"\n                        question={question}\n                        key={question.id}\n                        onSave={(question) => app.updateQuestion(question)}\n                        onDelete={(question) => app.deleteQuestion(question)}\n                        qs={qs}\n                    />\n                ))\n            }\n\n            <div className=\"QuestionsManagement__link-container\">\n                <button type=\"button\"\n                    onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                >\n                    Вернуться\n                </button>\n            </div>\n\n        </div>\n    );\n\n};\n\n\nexport const QuestionsManagement = connect(mapStateToProps)(QuestionsManagementComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './Quest.css';\nimport { app } from '../../app';\nimport { IQuestion, IQuestionsList } from '../../models/qa';\nimport classnames from 'classnames';\n\n\ninterface IQuestProp {\n    questions?: IQuestionsList;\n    currentQuestionId?: number;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestProp, 'questions' | 'currentQuestionId'> = (state) => ({\n    questions: state.questions.questions,\n    currentQuestionId: state.questions.currentQuestionId,\n});\n\n\nconst QuestComponent: React.FC<IQuestProp> = (props) => {\n    const currentQuestionId = props.currentQuestionId!;\n    const questions = props.questions!;\n\n    let currentQuestion: IQuestion|undefined|null;\n    if (!currentQuestionId) {\n        currentQuestion = questions!.filter(question => question ? question.isFirst : false)[0];\n    } else {\n        currentQuestion = questions!.filter(question => question ? question.id === currentQuestionId : false)[0];\n    }\n\n    if (!currentQuestion) {\n        return (\n            <h1>Первый вопрос не выбран или следующий вопрос \"{currentQuestionId}\" не найден!</h1>\n        );\n    }\n\n    const isFinal = currentQuestion.answers.filter(Boolean).length === 0;\n\n    console.log('current', currentQuestion);\n\n    return (\n        <div>\n            {currentQuestion.title && (\n                <div className={classnames('Quest__item', 'Quest__title')}>\n                    {currentQuestion.title}\n                </div>\n            )}\n            <div className=\"Quest__item\">\n                {currentQuestion.text}\n            </div>\n            {isFinal && (\n                <div className=\"Quest__item\">\n                    Победа!\n                </div>\n            )}\n            {!isFinal && currentQuestion.answers.map(answer => {\n                if (!answer || !answer.text || !answer.nextQuestion) {\n                    return null;\n                }\n\n                return (\n                    <div className={classnames('Quest__item', 'Quest__action')}\n                        onClick={() => app.nextQuestion(answer.nextQuestion)}\n                        key={answer.id}\n                    >\n                        {answer.text}\n                    </div>\n                );\n            })}\n            {isFinal && (\n                <div className=\"Quest__item\">\n                    <button type=\"button\"\n                        onClick={() => app.nextQuestion(0)}\n                    >\n                        Попробовать снова\n                    </button>\n                    <br/>\n                    <button type=\"button\"\n                        onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                    >\n                        Дать поиграть другим\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\n\nexport const Quest = connect(mapStateToProps)(QuestComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { app, ROUTE_STATES } from '../../app';\nimport { Landing } from '../Landing/Landing';\nimport { AdminMenu } from '../AdminMenu/AdminMenu';\nimport { QuestionsManagement } from '../QuestionsManagement/QuestionsManagement';\nimport { Quest } from '../Quest/Quest';\n\n\ninterface IRoutingProps {\n    route?: ROUTE_STATES\n}\n\n\nconst mapStateToProps: IMapStateToProps<IRoutingProps, 'route'> = (state) => ({\n    route: state.routing.route\n});\n\n\nconst RoutingComponent: React.FC<IRoutingProps> = ({ route }) => {\n    switch (route) {\n        case app.ROUTE_STATES.QUEST:\n            return <Quest/>\n        case app.ROUTE_STATES.ADMIN_QUESTIONS_LIST:\n            return <QuestionsManagement/>;\n        case app.ROUTE_STATES.ADMIN_MAIN:\n            return <AdminMenu/>;\n        case app.ROUTE_STATES.MAIN:\n        default:\n            return <Landing/>;\n    }\n};\n\n\nexport const Routing = connect(mapStateToProps)(RoutingComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { AppHeader } from '../AppHeader/AppHeader';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { Routing } from './../Routing/Routing';\n\n\ninterface IAppProps {\n    isFullScreen?: boolean;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppProps, 'isFullScreen'> = (state) => ({\n    isFullScreen: state.fullScreen.inFullscreen\n});\n\n\nconst AppComponent: React.FC<IAppProps> = (props) => {\n    return (\n        <div className=\"App\">\n            <div className=\"App__container\">\n                <AppHeader className=\"App__header\"/>\n                <Routing/>\n            </div>\n        </div>\n    );\n};\n\n\nexport const App = connect(mapStateToProps)(AppComponent);\n","import { combineReducers } from 'redux';\nimport { IAppState } from './state';\nimport { fullScreenReducer } from './full-screen/full-screen-reducer';\nimport { routingReducer } from './routing/routing-reducer';\nimport { questionsReducer } from './questions/questions-reducer';\n\n\nexport const rootReducer = combineReducers<IAppState>({\n    fullScreen: fullScreenReducer,\n    routing: routingReducer,\n    questions: questionsReducer,\n});\n","import { fullScreenInitialState, IFullScreenState } from './full-screen/full-screen-state';\nimport { routeInitialState, IRoutingState } from './routing/routing-state';\nimport { questionsInitialState, IQuestionsState } from './questions/questions-state';\n\n\nexport interface IAppState {\n    fullScreen: IFullScreenState,\n    routing: IRoutingState,\n    questions: IQuestionsState,\n};\n\n\nexport const initialState: IAppState = {\n    fullScreen: fullScreenInitialState,\n    routing: routeInitialState,\n    questions: questionsInitialState,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App/App';\nimport { Provider } from 'react-redux'\nimport { configureStore, IAppStore } from './redux/store';\nimport { app } from './app';\n\nconst store = configureStore() as IAppStore;\n\napp.setStore(store);\n\nconst appElement = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n);\n\nReactDOM.render(appElement, document.getElementById('root'));\n","import { createStore, Store, Action } from 'redux';\nimport { rootReducer } from './root-reducer';\nimport { initialState, IAppState } from './state';\n\n\nexport interface IAction<TPayload> extends Action<string> {\n    payload: TPayload;\n}\n\n\n// any type does not matter this case\nexport type IAppStore = Store<IAppState, IAction<any>>;\n\n\nexport function configureStore() {\n  return createStore(rootReducer, initialState);\n}\n"],"sourceRoot":""}