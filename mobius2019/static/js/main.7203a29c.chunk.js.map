{"version":3,"sources":["redux/create-reducer.ts","redux/create-do-actions.ts","redux/full-screen/full-screen-state.ts","app/route-states.ts","redux/full-screen/full-screen-reducer.ts","redux/routing/routing-state.ts","redux/routing/routing-reducer.ts","utils/storage.ts","redux/questions/questions-state.ts","utils/extend-state.ts","redux/questions/questions-reducer.ts","utils/file.ts","redux/users/users-state.ts","redux/users/users-reducer.ts","redux/do-actions.ts","app/index.ts","app/app.ts","components/AppHeader/AppHeader.tsx","components/Landing/Landing.tsx","utils/text.ts","components/FileExport/FileExport.tsx","components/FileImport/FileImport.tsx","components/AdminMenu/AdminMenu.tsx","models/placeholders.ts","components/QuestionEdit/QuestionEdit.tsx","utils/clone-question.ts","components/QuestionsManagement/QuestionsManagement.tsx","components/RegistrationForm/RegistrationForm.tsx","utils/get-new-user.ts","components/Quest/Quest.tsx","components/Routing/Routing.tsx","components/App/App.tsx","redux/root-reducer.ts","redux/state.ts","index.tsx","redux/store.ts"],"names":["createReducer","reducerObj","initialState","state","action","actionType","type","reducer","createDoActions","_len","arguments","length","actionsNamesList","Array","_key","reduce","memo","actionName","store","payload","dispatch","ROUTE_STATES","fullScreenInitialState","inFullscreen","fullScreenActions","fullScreenReducer","TOGGLE","routeInitialState","route","MAIN","routingActions","routingReducer","GO_TO","StorageValue","key","undefined","Object","classCallCheck","this","value","serializedValue","JSON","stringify","window","localStorage","setItem","defaultValue","defaultValueToUse","getItem","parse","e","console","error","concat","storage","questions","users","questionsInitialState","restore","currentQuestionId","extendState","toAddOrKey","toAdd","defineProperty","objectSpread","FILE_TYPES","questionsActions","questionsReducer","ADD","question","id","toConsumableArray","DELETE","questionToDelete","map","UPDATE","questionToUpdate","resetIsFirst","isFirst","GO_TO_QUESTION","REPLACE","usersInitialState","currentUser","registrationUser","usersActions","usersReducer","CLEAR_REG_USER","REG_USER","ADD_OR_UPDATE","rawUser","newUser","keys","userKey","newValue","trim","sameUserIndex","findIndex","user","phone","hasSameUser","newUsersList","push","doActions","fullScreen","routing","app","App","_store","storeUnsubscriber","storedQuestions","storedUsers","createClass","_this","unsubscribeStore","subscribe","getState","storeQuestions","storeUsers","QUEST","questionId","lastQuestionId","qs","stateQuestions","stateUsers","get","sf","AppHeaderComponent","toggleState","toggleFullscreen","_this2","_this$props","props","className","isFullScreen","mainRouteState","conditionalClasses","AppHeader_small","react_default","a","createElement","classnames","onClick","toggleFullScreen","goToRoute","on","off","_this3","toggle","catch","log","React","Component","AppHeader","connect","Landing","restartGame","ADMIN_MAIN","padStart","item","strLength","symbol","mimeTypes","CSV","getFileObject","params","releaseFileObject","fileObjectUrl","charset","mimeType","fileType","data","Blob","content","URL","createObjectURL","revokeObjectURL","getFileName","section","extension","timestamp","now","Date","y","getFullYear","m","getMonth","d","getDate","H","getHours","M","getMinutes","S","getSeconds","getTimestamp","FileExport","fileName","buttonText","_this$state","prepareFile","href","download","releaseStateFileObject","fileDescription","getFileDescription","setState","stringifyContent","nameSection","toLowerCase","FileImport","onChange","event","onFileSelected","files","target","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","readFileAsString","then","_this3$props","parseJson","onContentRead","name","AdminMenu","_ref","ADMIN_QUESTIONS_LIST","FileImport_FileImport","updateQuestions","alert","FileExport_FileExport","placeholdersInfo","<%reg%>","<%login%>","QuestionEdit","_React$Component","_getPrototypeOf2","args","possibleConstructorReturn","getPrototypeOf","call","apply","isNew","hideTextError","inherits","hasAnswers","answers","filter","Boolean","isFinal","tooManyReg","text","split","mainHtmlId","textHtmlId","isFirstHtmlId","randomTextHtmlId","rootId","getRootId","react","onSubmit","checked","updateQuestionProp","htmlFor","placeholder","randomLineText","answerOrNull","index","answer","answerHtmlId","answerGotoHtmlId","answerInputHtmlId","answerWrongInputGotoHtmlId","updateAnswerProp","deleteAnswer","needUserInput","incorrectUserInputNextQuestion","parseInt","nextQuestion","addAnswer","onDelete","propName","propValue","originalAnswer","updatedAnswer","preventDefault","onSave","answerIndex","stateAnswers","newAnswer","propQuestion","stateQuestion","QuestionsManagement","QuestionEdit_QuestionEdit_QuestionEdit","addQuestion","updateQuestion","deleteQuestion","RegistrationFormComponent","firstName","lastName","login","mainId","firstNameId","lastNameId","phoneId","loginId","maxLength","updateUser","userProp","registerUser","RegistrationForm","QuestComponent","userInput","currentQuestion","regUser","hideAnswers","includes","renderQuestionText","renderAnswer","handleSelectedAnswer","replaceLogin","expectedValue","texts","Math","floor","random","textParts","RegistrationForm_RegistrationForm","join","Quest","Routing","Quest_Quest","QuestionsManagement_QuestionsManagement","AdminMenu_AdminMenu","Landing_Landing","_header_small","_quest-in-progress","AppHeader_AppHeader","rootReducer","combineReducers","createStore","setStore","appElement","es","App_App_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7203a29c.chunk.js","sourcesContent":["import { Reducer } from 'redux'\nimport { IAction } from './store';\n\n\n// { actionName: (state, action) => state }\nexport type IReducerObj<TState, TActionsToPayloads> = {\n    [K in keyof TActionsToPayloads]: Reducer<TState, IAction<TActionsToPayloads[K]>>\n}\n\n\nexport function createReducer<TActionsToPayload, TState>\n        (reducerObj: IReducerObj<TState, TActionsToPayload>, initialState: TState)\n{\n    return (state: TState | undefined, action: IAction<any>) => {\n        if (!state) {\n            return initialState;\n        }\n\n        const actionType: keyof TActionsToPayload = action.type as keyof TActionsToPayload;\n        const reducer = (reducerObj as any)[actionType] as Reducer<TState, IAction<any>>;\n        if (reducer) {\n            return reducer(state!, action) as TState;\n        }\n        return state!;\n    };\n}\n","import { IAppStore } from './store';\n\n\ntype IDoActionsWithPayload<TActionsToPayload> = {\n    [K in keyof TActionsToPayload]: (store: IAppStore | null, payload: TActionsToPayload[K]) => void;\n}\n\n\nexport function createDoActions<TActionsToPayload>(...actionsNamesList: Array<keyof TActionsToPayload>): IDoActionsWithPayload<TActionsToPayload> {\n    return actionsNamesList.reduce((memo, actionName) => {\n        memo[actionName] = (store, payload) => {\n            if (!store) {\n                return;\n            }\n\n            store.dispatch({\n                type: actionName as string,\n                payload\n            });\n        };\n        return memo;\n    }, {} as IDoActionsWithPayload<TActionsToPayload>);\n}\n","export interface IFullScreenState {\n    inFullscreen: boolean\n};\n\n\nexport const fullScreenInitialState: IFullScreenState = {\n    inFullscreen: false\n};\n","export enum ROUTE_STATES {\n    MAIN = 'MAIN',\n    ADMIN_MAIN = 'ADMIN_MAIN',\n    ADMIN_QUESTIONS_LIST = 'ADMIN_QUESTIONS_LIST',\n    QUEST = 'QUEST',\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IFullScreenState, fullScreenInitialState } from './full-screen-state';\n\n\nexport interface IFullScreenActionsToPayloads {\n    TOGGLE: void\n}\n\n\nexport const fullScreenActions = createDoActions<IFullScreenActionsToPayloads>('TOGGLE');\n\n\nconst reducerObj: IReducerObj<IFullScreenState, IFullScreenActionsToPayloads> = {\n    'TOGGLE': (state) => ({\n        inFullscreen: !state!.inFullscreen\n    }),\n};\n\n\nexport const fullScreenReducer = createReducer(reducerObj, fullScreenInitialState);\n","import { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingState {\n    route: ROUTE_STATES;\n};\n\n\nexport const routeInitialState: IRoutingState = {\n    route: ROUTE_STATES.MAIN\n};\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IRoutingState, routeInitialState } from './routing-state';\nimport { ROUTE_STATES } from '../../app/route-states';\n\n\nexport interface IRoutingActionsToPayloads {\n    GO_TO: ROUTE_STATES;\n}\n\n\nexport const routingActions = createDoActions<IRoutingActionsToPayloads>('GO_TO');\n\n\nconst reducerObj: IReducerObj<IRoutingState, IRoutingActionsToPayloads> = {\n    'GO_TO': (state, action) => ({\n        route: action.payload\n    }),\n};\n\n\nexport const routingReducer = createReducer(reducerObj, routeInitialState);\n","import { IQuestionsList } from '../models/qa';\nimport { IUser } from '../models/user';\n\n\nclass StorageValue<T> {\n\n    constructor(private key = '') {\n    }\n\n\n    store(value: T) {\n        const serializedValue = JSON.stringify(value);\n        window.localStorage.setItem(this.key, serializedValue);\n    }\n\n\n    restore(defaultValue?: T): T | null {\n        const defaultValueToUse = defaultValue || null;\n        const serializedValue = window.localStorage.getItem(this.key);\n        if (!serializedValue) {\n            return defaultValueToUse;\n        }\n        try {\n            return JSON.parse(serializedValue) as T;\n        } catch (e) {\n            console.error('serialized value', serializedValue);\n            console.error(`while parsing serialized value from key ${this.key}`, e);\n        }\n        return defaultValueToUse;\n    }\n}\n\n\nexport const storage = {\n    questions: new StorageValue<IQuestionsList>('mobius2019_questions'),\n    users: new StorageValue<IUser[]>('mobius2019_users'),\n};\n","import { IQuestionsList } from '../../models/qa';\nimport { storage } from '../../utils/storage';\n\n\nexport interface IQuestionsState {\n    questions: IQuestionsList;\n    currentQuestionId: number;\n};\n\n\nexport const questionsInitialState: IQuestionsState = {\n    questions: storage.questions.restore([]) as IQuestionsList,\n    currentQuestionId: 0,\n};\n","export function extendState<T>(state: T, toAdd: Partial<T>): T;\nexport function extendState<T, K extends keyof T>(state: T, key: K, value: T[K]): T\n\nexport function extendState<T, K extends keyof T>(state: T, toAddOrKey: Partial<T> | K, value?: T[K]): T {\n    const toAdd = arguments.length === 3\n        ? ({ [toAddOrKey as K]: value } as any) as Partial<T>\n        : toAddOrKey as Partial<T>;\n    return {\n        ...state,\n        ...toAdd\n    };\n}\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IQuestionsState, questionsInitialState } from './questions-state';\nimport { IQuestion, INewQuestion, IQuestionsList } from '../../models/qa';\nimport { extendState } from '../../utils/extend-state';\n\n\nexport interface IQuestionsActionsToPayloads {\n    ADD: INewQuestion,\n    DELETE: IQuestion,\n    UPDATE: IQuestion,\n    REPLACE: IQuestionsList,\n    GO_TO_QUESTION: number,\n}\n\n\nexport const questionsActions = createDoActions<IQuestionsActionsToPayloads>(\n    'ADD', 'DELETE', 'UPDATE', 'REPLACE', 'GO_TO_QUESTION',\n);\n\n\nconst reducerObj: IReducerObj<IQuestionsState, IQuestionsActionsToPayloads> = {\n    'ADD': (state, action) => {\n        // INewQuestion will become IQuestion after 'id' will be added.\n        const question = { ...action.payload } as IQuestion;\n        const questions = state!.questions;\n        question.id = questions.length + 1;\n        return extendState(state!, 'questions', [...questions, question]);\n    },\n    'DELETE': (state, action) => {\n        const questionToDelete = action.payload;\n        const questions = state!.questions.map(question =>\n            question && question.id !== questionToDelete.id ? question : null);\n        return extendState(state!, 'questions', questions);\n    },\n    'UPDATE': (state, action) => {\n        const questionToUpdate = action.payload;\n        const resetIsFirst = questionToUpdate.isFirst;\n        const questions = state!.questions.map(question => {\n            if (!question) {\n                return null;\n            }\n            if (resetIsFirst) {\n                question = { ...question, isFirst: false };\n            }\n            return question.id === questionToUpdate.id ? questionToUpdate : question;\n        });\n        return extendState(state!, 'questions', questions);\n    },\n    'GO_TO_QUESTION': (state, action) => {\n        return extendState(state!, 'currentQuestionId', action.payload);\n    },\n    'REPLACE': (state, action) => {\n        return extendState(state!, 'questions', action.payload);\n    },\n};\n\n\nexport const questionsReducer = createReducer(reducerObj, questionsInitialState);\n","import { padStart } from './text';\n\nexport enum FILE_TYPES {\n    JSON = 'JSON',\n    CSV = 'CSV',\n}\n\n\nconst mimeTypes: { [key in FILE_TYPES]: string } = {\n    JSON: 'application/json',\n    CSV: 'text/csv',\n};\n\n\nexport interface IFileDescription {\n    content: any;\n    nameSection: string; // имя в файле без timestamp и расширения\n    type: FILE_TYPES;\n}\n\n\n/**\n * Выгружает пользователю файл.\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n * @param {object} params\n * @param {string} params.content\n * @param {string} params.type MIME-type.\n * @param {string} [params.charset='utf-8']\n * @param {object} [params.fileObject] Ранее сгенерированный объект для выгрузки этого файла.\n * @returns {File|Blob} See URL.createObjectURL API.\n */\nexport function getFileObject(params: {\n    content: string,\n    fileType: FILE_TYPES,\n    charset?: string,\n    fileObjectUrl?: string\n}): string {\n  releaseFileObject(params.fileObjectUrl);\n\n  const charset = params.charset || 'utf-8';\n  const mimeType = mimeTypes[params.fileType];\n  const type = `data:${mimeType};charset=${charset}`;\n  const data = new Blob([params.content], { type });\n  const fileObject = window.URL.createObjectURL(data);\n  return fileObject;\n}\n\n/**\n * @see http://jsfiddle.net/UselessCode/qm5AG/\n */\nexport function releaseFileObject(fileObjectUrl?: string) {\n  if (fileObjectUrl) {\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    window.URL.revokeObjectURL(fileObjectUrl);\n  }\n}\n\n\n/**\n * Запрашивает у пользователю разделитель для значений в CSV.\n * @param {string} [defaultDelimiter=';']\n * @returns {string}\n */\n/*\nexport function getCSVDelimiter(defaultDelimiter = ';') {\n  const userDelimiter = prompt(`Введите разделитель для CSV.\\n`\n    + `По умолчанию будет использован символ \"${defaultDelimiter}\".`, defaultDelimiter);\n  return userDelimiter || defaultDelimiter;\n}\n*/\n\n\n/**\n * Читает с диска файл.\n * @param {File} file Объект File, который может быть получен из input/type=file.\n * @returns {Promise<string>}\n */\nexport function readFileAsString(file: File): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event: ProgressEvent) => {\n            const content = (event.target as any).result;\n            resolve(content);\n        };\n\n        reader.onerror = (error) => {\n            reject(error);\n        };\n\n        reader.readAsText(file);\n    });\n}\n\n\n/**\n * Получение timestamp для использования в именах файлов, например.\n * @returns {string}\n */\nfunction getTimestamp() {\n    const now = new Date();\n    const y = now.getFullYear();\n    const m = padStart(now.getMonth() + 1, 2, '0');\n    const d = padStart(now.getDate(), 2, '0');\n    const H = padStart(now.getHours(), 2, '0');\n    const M = padStart(now.getMinutes(), 2, '0');\n    const S = padStart(now.getSeconds(), 2, '0');\n    return `${y}-${m}-${d}--${H}-${M}-${S}`;\n}\n\n\nexport function getFileName(section: string, extension?: string): string {\n    const timestamp = getTimestamp();\n    const fileName = extension\n        ? `${section}-${timestamp}.${extension}`\n        : `${timestamp}-${section}`;\n    return fileName;\n}\n","import { IUser } from '../../models/user';\nimport { storage } from '../../utils/storage';\n\n\nexport interface IUsersState {\n    users: IUser[];\n    currentUser: IUser | null;\n    registrationUser: IUser | null;\n};\n\n\nexport const usersInitialState: IUsersState = {\n    users: storage.users.restore([]) as IUser[],\n    currentUser: null,\n    registrationUser: null,\n};\n","import { createReducer, IReducerObj } from '../create-reducer';\nimport { createDoActions } from '../create-do-actions';\nimport { IUsersState, usersInitialState } from './users-state';\nimport { IUser } from '../../models/user';\nimport { extendState } from '../../utils/extend-state';\n\n\nexport interface IUsersActionsToPayloads {\n    REG_USER: IUser;\n    ADD_OR_UPDATE: IUser;\n    CLEAR_REG_USER: void;\n}\n\n\nexport const usersActions = createDoActions<IUsersActionsToPayloads>('ADD_OR_UPDATE', 'REG_USER', 'CLEAR_REG_USER');\n\n\nconst reducerObj: IReducerObj<IUsersState, IUsersActionsToPayloads> = {\n    'CLEAR_REG_USER': (state) => extendState(state!, 'registrationUser', null),\n    'REG_USER': (state, action) => extendState(state!, 'registrationUser', action.payload),\n    'ADD_OR_UPDATE': (state, action) => {\n        const rawUser = action.payload;\n        const newUser = Object.keys(rawUser).reduce<IUser>((memo, key) => {\n            const userKey = key as keyof IUser;\n            const newValue = rawUser[userKey];\n            memo[userKey] = typeof newValue === 'string' ? newValue.trim() : newValue;\n            return memo;\n        }, {} as IUser);\n        const sameUserIndex = state!.users.findIndex(user => user.phone === newUser.phone);\n        const hasSameUser = sameUserIndex !== -1;\n        let newUsersList = [...state!.users];\n        if (hasSameUser) {\n            newUsersList[sameUserIndex] = newUser;\n        } else {\n            newUsersList.push(newUser);\n        }\n        extendState(state!, 'currentUser', newUser);\n        return extendState(state!, 'users', newUsersList);\n    },\n};\n\n\nexport const usersReducer = createReducer(reducerObj, usersInitialState);\n","import { fullScreenActions } from './full-screen/full-screen-reducer';\nimport { routingActions } from './routing/routing-reducer';\nimport { questionsActions } from './questions/questions-reducer';\nimport { usersActions } from './users/users-reducer';\n\n\nexport const doActions = {\n    fullScreen: fullScreenActions,\n    routing: routingActions,\n    questions: questionsActions,\n    users: usersActions,\n};\n","import { App } from './app';\n\nexport const app = new App();\n\nexport * from './route-states';\n","import { Unsubscribe } from 'redux';\nimport { IAppStore } from '../redux/store';\nimport { IAppState } from '../redux/state';\nimport { doActions } from '../redux/do-actions';\nimport { ROUTE_STATES } from './route-states';\nimport { IQuestion, IQuestionsList } from '../models/qa';\nimport { IExportedQuestions } from '../models/export';\nimport { storage } from '../utils/storage';\nimport { IUser } from '../models/user';\n\nexport class App {\n\n    private _store: IAppStore | null = null;\n\n    private storeUnsubscriber: Unsubscribe | null = null;\n\n    private storedQuestions: IQuestionsList = [];\n    private storedUsers: IUser[] = [];\n\n    private get state(): IAppState {\n        return this._store!.getState();\n    }\n\n\n    ROUTE_STATES = ROUTE_STATES;\n\n\n    setStore(store: IAppStore) {\n        this._store = store;\n        this.unsubscribeStore();\n        if (store) {\n            store.subscribe(() => {\n                const state = store.getState();\n                this.storeQuestions(state);\n                this.storeUsers(state);\n            });\n        }\n    }\n\n\n    restartGame() {\n        doActions.users.CLEAR_REG_USER(this._store);\n        doActions.questions.GO_TO_QUESTION(this._store, 0);\n        doActions.routing.GO_TO(this._store, ROUTE_STATES.QUEST);\n    }\n\n\n    toggleFullscreen() {\n        doActions.fullScreen.TOGGLE(this._store);\n    }\n\n\n    goToRoute(route: ROUTE_STATES) {\n        doActions.routing.GO_TO(this._store, route);\n    }\n\n\n    addQuestion(question: IQuestion) {\n        doActions.questions.ADD(this._store, question);\n    }\n\n\n    deleteQuestion(question: IQuestion) {\n        doActions.questions.DELETE(this._store, question);\n    }\n\n\n    updateQuestion(question: IQuestion) {\n        doActions.questions.UPDATE(this._store, question);\n    }\n\n\n    nextQuestion(questionId: number) {\n        doActions.questions.GO_TO_QUESTION(this._store, questionId);\n        const registrationUser = this.state.users.registrationUser;\n        if (registrationUser) {\n            doActions.users.ADD_OR_UPDATE(this._store, {\n                ...registrationUser,\n                lastQuestionId: questionId\n            });\n        }\n    }\n\n    updateQuestions(questions: IQuestionsList | IExportedQuestions) {\n        const qs = questions instanceof Array ? questions : (questions as IExportedQuestions).questions;\n        doActions.questions.REPLACE(this._store, qs);\n    }\n\n\n    registerUser(user: IUser) {\n        doActions.users.REG_USER(this._store, user);\n    }\n\n\n    private unsubscribeStore() {\n        if (this.storeUnsubscriber) {\n            this.storeUnsubscriber();\n            this.storeUnsubscriber = null;\n        }\n    }\n\n\n    private storeQuestions(state: IAppState) {\n        const stateQuestions = state.questions.questions;\n        if (stateQuestions !== this.storedQuestions) {\n            this.storedQuestions = stateQuestions;\n            storage.questions.store(stateQuestions);\n        }\n    }\n\n\n    private storeUsers(state: IAppState) {\n        const stateUsers = state.users.users;\n        if (stateUsers !== this.storedUsers) {\n            this.storedUsers = stateUsers;\n            storage.users.store(stateUsers);\n        }\n    }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AppHeader.css';\nimport classnames from 'classnames';\nimport { app, ROUTE_STATES } from '../../app';\nimport * as screenfull from \"screenfull\";\nimport {Screenfull} from \"screenfull\";\nimport { IMapStateToProps } from '../../redux/connect';\n\n// https://github.com/sindresorhus/screenfull.js/issues/126#issuecomment-488796645\nlet sf = screenfull as Screenfull;\n\n\ninterface IAppHeaderProps {\n    className: string;\n    route?: ROUTE_STATES;\n    isFullScreen?: boolean;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppHeaderProps, 'isFullScreen'> = (state) => ({\n    route: state.routing.route,\n    isFullScreen: state.fullScreen.inFullscreen\n});\n\n\nclass AppHeaderComponent extends React.Component<IAppHeaderProps> {\n\n    toggleState = () => app.toggleFullscreen();\n\n\n    render() {\n        const { className, isFullScreen, route } = this.props;\n        const mainRouteState = route === ROUTE_STATES.MAIN;\n        const conditionalClasses = {\n            'AppHeader_small': !mainRouteState\n        };\n\n        return (\n            <div className={classnames('AppHeader', className, conditionalClasses)}>\n                { !isFullScreen && mainRouteState && (\n                    <button type=\"button\" onClick={() => this.toggleFullScreen()} className=\"AppHeader__fullscreen\">\n                        Развернуть\n                    </button>\n                )}\n                { !mainRouteState && (\n                    <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}>\n                        На главную\n                    </button>\n                )}\n            </div>\n        );\n    }\n\n\n    componentDidMount() {\n        sf.on('change', this.toggleState);\n    }\n\n\n    componentWillUnmount() {\n        sf.off('change', this.toggleState);\n    }\n\n\n    toggleFullScreen() {\n        sf.toggle()\n            .catch(error => console.log(\n                `while toggling fullsreen state, current state is ${this.props.isFullScreen}`,\n                error\n            ));\n    }\n\n}\n\n\nexport const AppHeader = connect(mapStateToProps)(AppHeaderComponent);\n","import React from 'react';\nimport './Landing.css';\nimport { app } from '../../app';\n\n\ninterface ILandingProps {\n}\n\n\nconst LandingComponent: React.FC<ILandingProps> = () => {\n    return (\n        <div>\n            <div>\n                <button type=\"button\" onClick={() => app.restartGame()}>\n                    Начать\n                </button>\n            </div>\n            <div className=\"Landing__goToAdmin\">\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.ADMIN_MAIN)}>\n                    Администрирование\n                </button>\n            </div>\n        </div>\n    );\n};\n\n\nexport const Landing = LandingComponent;\n","/**\n * Дополняет заданными символами слева до нужной длины строки.\n * @see https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n */\nexport function padStart(item: string|number, strLength: number, symbol: string): string {\n    const strItem = '' + item;\n    return strItem.padStart(strLength, symbol);\n}\n","import React from 'react';\nimport './FileExport.css';\nimport { IFileDescription, releaseFileObject, getFileObject, getFileName, FILE_TYPES } from '../../utils/file';\n\n\ninterface IFileExportProps {\n    getFileDescription: () => IFileDescription;\n    buttonText: string;\n}\n\n\ninterface IFileExportState {\n    fileObjectUrl: string;\n    fileName: string;\n}\n\n\nclass FileExportComponent extends React.Component<IFileExportProps, IFileExportState> {\n\n    state: IFileExportState = {\n        fileObjectUrl: '',\n        fileName: ''\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        const { fileObjectUrl, fileName } = this.state;\n\n        return (\n            <div>\n                <button type=\"button\"\n                    onClick={() => this.prepareFile()}\n                    className=\"FileExport__button\"\n                >\n                    { buttonText }\n                </button>\n                { fileObjectUrl && (\n                    <a href={fileObjectUrl} download={fileName}\n                        className=\"FileExport__button\"\n                    >\n                        Скачать файл\n                    </a>\n                )}\n            </div>\n        );\n    }\n\n\n    private prepareFile() {\n        this.releaseStateFileObject();\n\n        const fileDescription = this.props.getFileDescription();\n        this.setState({\n            fileObjectUrl: getFileObject({\n                content: this.stringifyContent(fileDescription.content),\n                fileType: fileDescription.type\n            }),\n            fileName: getFileName(fileDescription.nameSection, FILE_TYPES[fileDescription.type].toLowerCase())\n        });\n    }\n\n\n    private releaseStateFileObject() {\n        const { fileObjectUrl } = this.state;\n        if (fileObjectUrl) {\n            releaseFileObject(fileObjectUrl);\n        }\n    }\n\n\n    private stringifyContent(content: any): string {\n        if (!content) {\n            return '';\n        }\n        if (typeof content === 'object') {\n            // readable json\n            return JSON.stringify(content, null, 4);\n        }\n        return JSON.stringify(content);\n    }\n\n};\n\n\nexport const FileExport = FileExportComponent;\n","import React, { ChangeEvent } from 'react';\nimport './FileImport.css';\nimport { readFileAsString } from '../../utils/file';\n\n\ninterface IFileImportProps {\n    buttonText: string;\n    onContentRead: (content: any) => void;\n    parseJson?: boolean;\n}\n\n\ninterface IFileImportState {\n}\n\n\nclass FileImportComponent extends React.Component<IFileImportProps, IFileImportState> {\n\n    state: IFileImportState = {\n    };\n\n    render() {\n        const { buttonText } = this.props;\n        return (\n            <label className=\"FileImport\">\n                { buttonText }\n                <input type=\"file\"\n                    className=\"FileImport_import\"\n                    onChange={(event) => this.onFileSelected(event)}\n                />\n            </label>\n        );\n    }\n\n\n    private onFileSelected(event: ChangeEvent<HTMLInputElement>) {\n        const files = event.target.files;\n        const file = files && files[0];\n        if (file) {\n            readFileAsString(file)\n                .then(content => {\n                    const { parseJson, onContentRead } = this.props;\n\n                    if (!parseJson) {\n                        return onContentRead(content);\n                    }\n\n                    const json = JSON.parse(content);\n                    onContentRead(json);\n                })\n                .catch(error => console.error(`while reading file ${file.name}`, error));\n        }\n    }\n\n};\n\n\nexport const FileImport = FileImportComponent;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './AdminMenu.css';\nimport { app } from '../../app';\nimport { IQuestionsList } from '../../models/qa';\nimport { IExportedQuestions } from '../../models/export';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { FileExport } from '../FileExport/FileExport';\nimport { FileImport } from '../FileImport/FileImport';\nimport { FILE_TYPES } from '../../utils/file';\nimport { IUser } from '../../models/user';\n\n\ninterface IAdminMenuProps {\n    questions?: IQuestionsList;\n    users?: IUser[];\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAdminMenuProps, 'questions'> = (state) => ({\n    questions: state.questions.questions,\n    users: state.users.users,\n});\n\n\nconst AdminMenuComponent: React.FC<IAdminMenuProps> = ({ questions, users }) => {\n    return (\n        <ul className=\"AdminMenu__menu\">\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.ADMIN_QUESTIONS_LIST)}>\n                    Управление вопросами\n                </button>\n            </li>\n            <li>\n                <FileImport buttonText=\"Прочитать вопросы из файла\"\n                    parseJson={true}\n                    onContentRead={(questions: IQuestionsList | IExportedQuestions) => {\n                        app.updateQuestions(questions);\n                        window.alert('Вопрос прочитаны успешно!');\n                    }}\n                />\n            </li>\n            <li>\n                <FileExport buttonText=\"Скачать вопросы\"\n                    getFileDescription={() => ({\n                        type: FILE_TYPES.JSON,\n                        content: { questions },\n                        nameSection: 'questions'\n                    })}\n                />\n            </li>\n            <li>\n                <FileExport buttonText=\"Выгрузить пользователей\"\n                    getFileDescription={() => ({\n                        type: FILE_TYPES.JSON,\n                        content: { users },\n                        nameSection: 'users'\n                    })}\n                />\n            </li>\n            <li>\n                <button type=\"button\" onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}>\n                    На главную\n                </button>\n            </li>\n        </ul>\n    );\n};\n\n\nexport const AdminMenu = connect(mapStateToProps)(AdminMenuComponent);\n","export type IPlaceholders = '<%reg%>' | '<%login%>';\n\nexport const placeholdersInfo: { [key in IPlaceholders]: string} = {\n    '<%reg%>': 'поля для ввода регистрационных данных (только для вопросов)',\n    '<%login%>': 'вывод логина или \"Пользователь\" (по умолчанию)',\n};\n\nexport const placeholderReg: IPlaceholders = '<%reg%>';\nexport const placeholderLogin: IPlaceholders = '<%login%>';\n","import * as React from 'react';\nimport { IQuestion, IAnswer, IQuestionsList } from '../../models/qa';\nimport './QuestionEdit.css';\nimport classnames from 'classnames';\nimport { cloneQuestion } from '../../utils/clone-question';\nimport { placeholderReg } from '../../models/placeholders';\n\n\ninterface IQuestionEditProps {\n    question?: IQuestion;\n    qs: IQuestionsList;\n    onSave: (question: IQuestion) => void;\n    onDelete?: (question: IQuestion) => void;\n    className?: string;\n}\n\n\ninterface IQuestionEditState {\n    question?: IQuestion;\n    isNew: boolean;\n    hideTextError: boolean;\n}\n\n\nfunction getNewQuestion(): IQuestion {\n    return {\n        id: 0,\n        text: '',\n        // title: '',\n        answers: []\n    }\n}\n\n\nexport class QuestionEdit extends React.Component<IQuestionEditProps, IQuestionEditState> {\n\n    state: IQuestionEditState = {\n        isNew: true,\n        hideTextError: false,\n    };\n\n\n    static getDerivedStateFromProps(props: IQuestionEditProps, state: IQuestionEditState): IQuestionEditState | null {\n        const propQuestion = props.question;\n        const stateQuestion = state.question;\n\n        if (propQuestion) {\n            if (stateQuestion && stateQuestion.id === propQuestion.id) {\n                // update isFirst\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: {\n                    ...stateQuestion,\n                    isFirst: propQuestion.isFirst\n                }\n                }\n            } else {\n                return {\n                isNew: false,\n                hideTextError: false,\n                question: cloneQuestion(propQuestion)\n                };\n            }\n        } else if (stateQuestion) {\n            return null;\n        }\n\n        return {\n            isNew: true,\n            hideTextError: true,\n            question: getNewQuestion()\n        };\n    }\n\n\n    render() {\n        const { question, isNew, hideTextError } = this.state;\n        const { qs, className } = this.props;\n        const hasAnswers = question!.answers.filter(Boolean).length > 0;\n        const isFinal = !hasAnswers;\n        const tooManyReg = question!.text.split(placeholderReg).length > 2;\n\n        const mainHtmlId = `QuestionEdit__${question!.id}`;\n        // const titleHtmlId = `${mainHtmlId}__title`;\n        const textHtmlId = `${mainHtmlId}__text`;\n        const isFirstHtmlId = `${mainHtmlId}__isFirst`;\n        const randomTextHtmlId = `${mainHtmlId}__randomText`;\n\n        const rootId = this.getRootId(this.props.question ? this.props.question.id : 0);\n\n        return (\n            <div className={classnames('QuestionEdit', className)} id={rootId}>\n                <form onSubmit={(event) => this.onSubmit(question!, event)}>\n                    <div className={classnames('QuestionEdit__indented', 'QuestionEdit__row')}>\n                        <b>\n                            {isNew\n                                ? 'Новый вопрос'\n                                : isFinal\n                                    ? `Финал, #${question!.id}`\n                                    : `Вопрос, #${question!.id}`\n                            }\n                        </b>\n                        {!isFinal && (\n                            <div className={classnames('QuestionEdit__wideItem', 'QuestionEdit__checkboxContainer')}>\n                                <label>\n                                    <input type=\"checkbox\"\n                                        name={isFirstHtmlId}\n                                        checked={question!.isFirst}\n                                        onChange={(event) => this.updateQuestionProp('isFirst', event.target.checked)}\n                                        className=\"QuestionEdit__checkbox\"\n                                    />\n                                    первый вопрос\n                                </label>\n                            </div>\n                        )}\n                    </div>\n                    {/* <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={titleHtmlId}>\n                            Заголовок\n                        </label>\n                        <input name={titleHtmlId}\n                            type=\"text\"\n                            id={titleHtmlId}\n                            value={question!.title}\n                            onChange={(event) => this.updateQuestionProp('title', event.target.value)}\n                            className=\"QuestionEdit__wideItem\"\n                            placeholder=\"Необязательно\"\n                        />\n                    </div> */}\n                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')}>\n                        <label htmlFor={textHtmlId}>\n                            Текст\n                        </label>\n                        <div className=\"QuestionEdit__wideItem\">\n                            <textarea name={textHtmlId}\n                                id={textHtmlId}\n                                className={classnames('', 'QuestionEdit__bigEditor')}\n                                value={question!.text}\n                                onChange={(event) => this.updateQuestionProp('text', event.target.value)}\n                                placeholder=\"Заполните текст вопроса!\"\n                            ></textarea>\n                            <div className=\"QuestionEdit__checkboxContainer\">\n                                <label>\n                                    <input type=\"checkbox\"\n                                        name={randomTextHtmlId}\n                                        checked={!!question!.randomLineText}\n                                        onChange={(event) => this.updateQuestionProp('randomLineText', event.target.checked)}\n                                        className=\"QuestionEdit__checkbox\"\n                                    />\n                                    показывать рандомную строку\n                                </label>\n                            </div>\n                            { question!.randomLineText && (\n                                <div>\n                                    ВНИМАНИЕ: пользователю будет отображаться рандомная непустая строка из текста этого вопроса!!!\n                                </div>\n                            )}\n                            { tooManyReg && (\n                                <div className=\"QuestionEdit__error\">\n                                    Вы вставили больше одного блока ввода регистрационных данных!\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    {\n                        !question!.text && !hideTextError && (\n                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                Заполните текст вопроса!\n                            </div>\n                        )\n                    }\n\n                    {\n                        hasAnswers && (\n                            <div className={'QuestionEdit__indented'}>\n                                Ответы:\n                            </div>\n                        )\n                    }\n\n                    {\n                        question!.answers.map((answerOrNull, index) => {\n                            if (!answerOrNull) {\n                                return null;\n                            }\n\n                            const answer = answerOrNull!;\n                            const answerHtmlId = `${mainHtmlId}_answer_${answer.id}`;\n                            const answerGotoHtmlId = `${answerHtmlId}_goto`;\n                            const answerInputHtmlId = `${answerHtmlId}_input`;\n                            const answerWrongInputGotoHtmlId = `${answerHtmlId}_wrongInputGot`;\n\n                            return (\n                                <div className={'QuestionEdit__indented'} key={answer.id}>\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented')} key={`${answer.id}_text`}>\n                                        <textarea\n                                            name={answerHtmlId}\n                                            id={answerHtmlId}\n                                            value={answer.text}\n                                            onChange={(event) => this.updateAnswerProp(answer, 'text', event.target.value)}\n                                            className={classnames('QuestionEdit__wideItem', 'QuestionEdit__bigEditor')}\n                                            placeholder=\"Заполните текст ответа!!!\"\n                                        ></textarea>\n                                        <button type=\"button\" onClick={() => this.deleteAnswer(index)}>\n                                            Удалить\n                                        </button>\n                                    </div>\n                                    {\n                                        !answer.text && (\n                                            <div className={classnames('QuestionEdit__indented', 'QuestionEdit__error')}>\n                                                Заполните текст ответа!!!\n                                            </div>\n                                        )\n                                    }\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__indented', 'QuestionEdit__hor-indented', 'QuestionEdit__checkboxContainer')}\n                                        key={`${answer.id}_userInput`}\n                                    >\n                                        <label>\n                                            <input type=\"checkbox\"\n                                                name={answerInputHtmlId}\n                                                checked={answer.needUserInput}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'needUserInput', event.target.checked)}\n                                                className=\"QuestionEdit__checkbox\"\n                                            />\n                                            пользовательский ввод\n                                        </label>\n                                    </div>\n                                    { answer.needUserInput && (\n                                        <div className={classnames('QuestionEdit__row', 'QuestionEdit__hor-indented')} key={`${answer.id}_wrongInputGoto`}>\n                                            <label htmlFor={answerWrongInputGotoHtmlId}>\n                                                Ошибка на\n                                            </label>\n                                            <div className={'QuestionEdit__wideItem'}>\n                                                <select id={answerWrongInputGotoHtmlId}\n                                                    value={answer.incorrectUserInputNextQuestion}\n                                                    name={answerWrongInputGotoHtmlId}\n                                                    onChange={(event) => this.updateAnswerProp(answer, 'incorrectUserInputNextQuestion', parseInt(event.target.value, 10))}\n                                                >\n                                                    {!answer.incorrectUserInputNextQuestion && (\n                                                        <option value=\"0\">\n                                                            Выберите точку перехода при неверном вводе\n                                                        </option>\n                                                    )}\n                                                    {\n                                                        qs.map(question => question && (\n                                                            <option key={question.id} value={question.id}>\n                                                                {/* {question.title || question.text} */}\n                                                                { question.text }\n                                                            </option>\n                                                        ))\n                                                    }\n                                                </select>\n                                                <div>\n                                                    <a href={`#${this.getRootId(answer.incorrectUserInputNextQuestion)}`}>\n                                                        {answer.incorrectUserInputNextQuestion ? 'к вопросу' : 'создать новый'}\n                                                    </a>\n                                                </div>\n                                                {\n                                                    !answer.incorrectUserInputNextQuestion && (\n                                                        <div className=\"QuestionEdit__error\">\n                                                            Выберите точку перехода!!!\n                                                        </div>\n                                                    )\n                                                }\n                                            </div>\n                                        </div>\n                                    )}\n                                    <div className={classnames('QuestionEdit__row', 'QuestionEdit__hor-indented')} key={`${answer.id}_goto`}>\n                                        <label htmlFor={answerGotoHtmlId}>\n                                            Перейти к\n                                        </label>\n                                        <div className={'QuestionEdit__wideItem'}>\n                                            <select id={answerGotoHtmlId}\n                                                value={answer.nextQuestion}\n                                                name={answerGotoHtmlId}\n                                                onChange={(event) => this.updateAnswerProp(answer, 'nextQuestion', parseInt(event.target.value, 10))}\n                                            >\n                                                {!answer.nextQuestion && (\n                                                    <option value=\"0\">\n                                                        Выберите точку перехода!!!\n                                                    </option>\n                                                )}\n                                                {\n                                                    qs.map(question => question && (\n                                                        <option key={question.id} value={question.id}>\n                                                            {/* {question.title || question.text} */}\n                                                            { question.text }\n                                                        </option>\n                                                    ))\n                                                }\n                                            </select>\n                                            <div>\n                                                <a href={`#${this.getRootId(answer.nextQuestion)}`}>\n                                                    {answer.nextQuestion ? 'к вопросу' : 'создать новый'}\n                                                </a>\n                                            </div>\n                                            {\n                                                !answer.nextQuestion && (\n                                                    <div className=\"QuestionEdit__error\">\n                                                        Выберите точку перехода!!!\n                                                    </div>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n\n                    <div className={'QuestionEdit__indented'}>\n                        <button type=\"button\" onClick={() => this.addAnswer()}>\n                            Добавить ответ\n                        </button>\n                    </div>\n\n                    <div className={'QuestionEdit__indented'}>\n                        {isNew && (\n                            <button type=\"submit\" className={'QuestionEdit__submit'}>\n                                Добавить этот вопрос\n                            </button>\n                        )}\n                        {\n                            this.props.onDelete && (\n                                <button type=\"button\" className={'QuestionEdit__delete'} onClick={() => this.props.onDelete!(question!)}>\n                                    Удалить вопрос\n                                </button>\n                            )\n                        }\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n\n    private updateQuestionProp<K extends keyof IQuestion>(propName: K, propValue: IQuestion[K]) {\n        const question = { ...this.state.question, [propName]: propValue } as IQuestion;\n        this.setState({\n            question,\n            hideTextError: false\n        });\n\n        if (!this.state.isNew) {\n            this.onSubmit(question);\n        }\n    }\n\n\n    private updateAnswerProp<K extends keyof IAnswer>(originalAnswer: IAnswer, propName: K, propValue: IAnswer[K]) {\n        const updatedAnswer = { ...originalAnswer, [propName]: propValue } as IAnswer;\n        const answers = this.state.question!.answers.map(answer => answer && answer.id === originalAnswer.id ? updatedAnswer : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private onSubmit(question: IQuestion, event?: React.BaseSyntheticEvent) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (!question.text) {\n            return;\n        }\n\n        if (this.state.isNew) {\n            if (event) {\n                this.props.onSave(question);\n                this.setState({\n                    hideTextError: true,\n                    question: getNewQuestion()\n                });\n            }\n        } else {\n            this.props.onSave(question);\n        }\n    }\n\n\n    private deleteAnswer(answerIndex: number) {\n        const answers = this.state.question!.answers.map((answer, index) => !answer || index === answerIndex ? null : answer);\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private addAnswer() {\n        const stateAnswers = this.state.question!.answers;\n        const newAnswer: IAnswer = {\n            id: stateAnswers.length + 1,\n            text: '',\n            nextQuestion: 0,\n        };\n        const answers = [...stateAnswers, newAnswer];\n        this.updateQuestionProp('answers', answers);\n    }\n\n\n    private getRootId(questionId?: number): string {\n        const baseId = 'QuestionEdit_root_';\n        return questionId ? `${baseId}_${questionId}` : `${baseId}_new`;\n    }\n\n}\n","import { IQuestion } from '../models/qa';\n\nexport function cloneQuestion(question: IQuestion): IQuestion {\n    return {\n      ...question,\n      answers: question.answers.map(answer => answer ? { ...answer } : null)\n    };\n  }\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './QuestionsManagement.css';\nimport { app } from '../../app';\nimport { QuestionEdit } from '../QuestionEdit/QuestionEdit';\nimport { IQuestionsList } from '../../models/qa';\nimport { placeholdersInfo, IPlaceholders } from '../../models/placeholders';\n\n\ninterface IQuestionsManagementProps {\n    questions?: IQuestionsList;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestionsManagementProps, 'questions'> = (state) => ({\n    questions: state.questions.questions\n});\n\n\nconst QuestionsManagementComponent: React.FC<IQuestionsManagementProps> = (props) => {\n    const qs = props.questions!;\n\n    return (\n        <div>\n            <div>\n                Задайте вопросы квеста!\n                <br />\n                Вопросы без ответов считаются финальными состояними квеста!\n                <br />\n                Ответы без текста или без указания цели перехода отображены не будут!\n                <br />\n                При удалении вопросов или ответов номера остальных вопросов/ответов не меняются!\n            </div>\n            <div>\n                В тексте вопросов и ответов можно использовать подстановки:\n                {\n                    Object.keys(placeholdersInfo).map((placeholder, index) => (\n                        <div key={index}>\n                            { placeholder } - { placeholdersInfo[placeholder as IPlaceholders] }\n                        </div>\n                    ))\n                }\n            </div>\n\n            <QuestionEdit\n                className=\"QuestionsManagement__question\"\n                onSave={(question) => app.addQuestion(question)}\n                qs={qs}\n            />\n\n            {\n                qs.map(question => question && (\n                    <QuestionEdit\n                        className=\"QuestionsManagement__question\"\n                        question={question}\n                        key={question.id}\n                        onSave={(question) => app.updateQuestion(question)}\n                        onDelete={(question) => app.deleteQuestion(question)}\n                        qs={qs}\n                    />\n                ))\n            }\n\n            <div className=\"QuestionsManagement__link-container\">\n                <button type=\"button\"\n                    onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                >\n                    На главную\n                </button>\n            </div>\n\n        </div>\n    );\n\n};\n\n\nexport const QuestionsManagement = connect(mapStateToProps)(QuestionsManagementComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { app } from '../../app';\nimport { IUser } from '../../models/user';\nimport './RegistrationForm.css';\nimport { getNewUser } from '../../utils/get-new-user';\n\n\ninterface IRegistrationFormProps {\n    route: string;\n    className?: string;\n}\n\n\ninterface IRegistrationFormState {\n    user: IUser;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IRegistrationFormProps, 'route'> = (state) => ({\n    route: state.routing.route\n});\n\n\nclass RegistrationFormComponent extends React.Component<IRegistrationFormProps, IRegistrationFormState> {\n\n    state = {\n        user: getNewUser()\n    };\n\n    render() {\n        const mainId = `RegistrationForm`;\n        const firstNameId = `${mainId}_fn`;\n        const lastNameId = `${mainId}_ln`;\n        const phoneId = `${mainId}_phone`;\n        const loginId = `${mainId}_login`;\n\n        return (\n            <ul className={this.props.className}>\n                <li>\n                    <label htmlFor={firstNameId} className=\"RegistrationForm__label\">\n                        Имя:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={firstNameId}\n                        name={firstNameId}\n                        maxLength={100}\n                        value={this.state.user.firstName}\n                        onChange={(event) => this.updateUser('firstName', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={lastNameId} className=\"RegistrationForm__label\">\n                        Фамилия:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={lastNameId}\n                        name={lastNameId}\n                        maxLength={100}\n                        value={this.state.user.lastName}\n                        onChange={(event) => this.updateUser('lastName', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={phoneId} className=\"RegistrationForm__label\">\n                        Телефон:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={phoneId}\n                        name={phoneId}\n                        maxLength={100}\n                        value={this.state.user.phone}\n                        onChange={(event) => this.updateUser('phone', event)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor={loginId} className=\"RegistrationForm__label\">\n                        Логин:\n                    </label>\n                    <input type=\"text\"\n                        className=\"std\"\n                        id={loginId}\n                        name={loginId}\n                        maxLength={100}\n                        value={this.state.user.login}\n                        onChange={(event) => this.updateUser('login', event)}\n                    />\n                </li>\n            </ul>\n        );\n    }\n\n\n    private updateUser(userProp: keyof IUser, event: React.ChangeEvent<HTMLInputElement>) {\n        const value = event.target.value;\n        const user = { ...this.state.user, [userProp]: value };\n        this.setState({ user });\n        app.registerUser(user);\n    }\n\n}\n\n\nexport const RegistrationForm = connect(mapStateToProps)(RegistrationFormComponent);\n","import { IUser } from '../models/user';\n\nexport function getNewUser(): IUser {\n    return {\n        firstName: '',\n        lastName: '',\n        login: '',\n        phone: '',\n        lastQuestionId: 0\n    };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport './Quest.css';\nimport { app } from '../../app';\nimport { IQuestion, IQuestionsList, IAnswer } from '../../models/qa';\nimport classnames from 'classnames';\nimport { placeholderReg, placeholderLogin } from '../../models/placeholders';\nimport { RegistrationForm } from '../RegistrationForm/RegistrationForm';\nimport { IUser } from '../../models/user';\n\n\ninterface IQuestProp {\n    questions?: IQuestionsList;\n    currentQuestionId?: number;\n    registrationUser?: IUser | null;\n}\n\n\ninterface IQuestState {\n    userInput: string;\n    currentQuestionId: number;\n}\n\n\nconst mapStateToProps: IMapStateToProps<IQuestProp, 'questions' | 'currentQuestionId'> = (state) => ({\n    questions: state.questions.questions,\n    currentQuestionId: state.questions.currentQuestionId,\n    registrationUser: state.users.registrationUser,\n});\n\n\nclass QuestComponent extends React.Component<IQuestProp, IQuestState> {\n\n    state: IQuestState = {\n        userInput: '',\n        currentQuestionId: 0\n    };\n\n\n    static getDerivedStateFromProps(props: IQuestProp, state: IQuestState): IQuestState | null {\n        if (props.currentQuestionId && props.currentQuestionId !== state.currentQuestionId) {\n            return { ...state, userInput: '' };\n        }\n        return null;\n    }\n\n\n    render() {\n\n        const currentQuestionId = this.props.currentQuestionId!;\n        const questions = this.props.questions!;\n        const regUser = this.props.registrationUser;\n\n        let currentQuestion: IQuestion|undefined|null;\n        if (!currentQuestionId) {\n            currentQuestion = questions!.filter(question => question ? question.isFirst : false)[0];\n        } else {\n            currentQuestion = questions!.filter(question => question ? question.id === currentQuestionId : false)[0];\n        }\n\n        if (!currentQuestion) {\n            return (\n                <h1>Первый вопрос не выбран или следующий вопрос \"{currentQuestionId}\" не найден!</h1>\n            );\n        }\n\n        const isFinal = currentQuestion.answers.filter(Boolean).length === 0;\n        const hasReg = currentQuestion.text.includes(placeholderReg);\n        const hideAnswers = hasReg && (!regUser || !regUser.phone\n            || (!regUser.firstName && !regUser.lastName) || !regUser.login);\n\n        return (\n            <div>\n                {/* {currentQuestion.title && (\n                    <div className=\"Quest__title\">\n                        {currentQuestion.title}\n                    </div>\n                )} */}\n                <div className={classnames('Quest__text', 'Quest__ml')}>\n                    { this.renderQuestionText(currentQuestion) }\n                </div>\n                {!isFinal && !hideAnswers && (\n                    <ul className=\"Quest__answers\">\n                        {\n                            currentQuestion.answers.map(answer => {\n                                if (!answer || !answer.text || !answer.nextQuestion) {\n                                    return null;\n                                }\n\n                                return (\n                                    <li key={answer.id} className=\"Quest__action-container\">\n                                        { this.renderAnswer(answer) }\n                                    </li>\n                                );\n                            })\n                        }\n                    </ul>\n                )}\n                {isFinal && (\n                    <ul className=\"Quest__final-actions\">\n                        <li>\n                            <button type=\"button\"\n                                onClick={() => app.restartGame()}\n                            >\n                                Попробовать снова\n                            </button>\n                        </li>\n                        <li>\n                            <button type=\"button\"\n                                onClick={() => app.goToRoute(app.ROUTE_STATES.MAIN)}\n                            >\n                                Дать поиграть другим\n                            </button>\n                        </li>\n                    </ul>\n                )}\n            </div>\n        );\n    }\n\n\n    private renderAnswer(answer: IAnswer): React.ReactElement {\n        if (answer.needUserInput) {\n            return (\n                <div className=\"Quest__user-input-container\">\n                    <input type=\"text\"\n                        maxLength={100}\n                        value={this.state.userInput}\n                        onChange={(event) => this.setState({ userInput: event.target.value }) }\n                        className=\"std\"\n                        placeholder=\"Введите ответ здесь\"\n                    />\n                    { this.state.userInput && (\n                        <button type=\"button\"\n                            className=\"Quest__user-input-submit\"\n                            onClick={() => this.handleSelectedAnswer(answer)}\n                        >\n                            Отправить ответ\n                        </button>\n                    )}\n                </div>\n            );\n        }\n\n        return (\n            <button type=\"button\" onClick={() => this.handleSelectedAnswer(answer)}\n                className={classnames('Quest__action', 'Quest__ml')}\n            >\n                { this.replaceLogin(answer.text)}\n            </button>\n        );\n    }\n\n\n    private handleSelectedAnswer(answer: IAnswer) {\n        let nextQuestion: number | undefined = answer.nextQuestion;\n\n        if (answer.needUserInput) {\n            const expectedValue = answer.text.toLowerCase().trim();\n            const inputValue = this.state.userInput.toLowerCase().trim();\n            nextQuestion = inputValue === expectedValue\n                ? answer.nextQuestion\n                : answer.incorrectUserInputNextQuestion;\n        }\n\n        app.nextQuestion(nextQuestion || 0);\n    }\n\n\n    private renderQuestionText(question: IQuestion): React.ReactElement | string | Array<React.ReactElement | string> {\n        if (question.randomLineText) {\n            const texts = question.text.split('\\n').filter(Boolean);\n            const randomTextIndex = Math.floor(Math.random() * texts.length);\n            const text = texts[randomTextIndex];\n            return this.replaceLogin(text);\n        }\n\n        if (question.text.includes(placeholderReg)) {\n            const textParts = question.text.split(placeholderReg);\n            return [\n                this.replaceLogin(textParts[0].trim()),\n                <RegistrationForm key={1} className=\"Quest__registration\"/>,\n                this.replaceLogin(textParts[1].trim()),\n            ];\n        }\n\n        return this.replaceLogin(question.text);\n    }\n\n\n    private replaceLogin(text: string): string {\n        if (!text.includes(placeholderLogin)) {\n            return text;\n        }\n        const login = this.props.registrationUser && this.props.registrationUser.login || 'Пользователь';\n        return text.split(placeholderLogin).join(login);\n    }\n\n};\n\n\nexport const Quest = connect(mapStateToProps)(QuestComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { app, ROUTE_STATES } from '../../app';\nimport { Landing } from '../Landing/Landing';\nimport { AdminMenu } from '../AdminMenu/AdminMenu';\nimport { QuestionsManagement } from '../QuestionsManagement/QuestionsManagement';\nimport { Quest } from '../Quest/Quest';\n\n\ninterface IRoutingProps {\n    route?: ROUTE_STATES\n}\n\n\nconst mapStateToProps: IMapStateToProps<IRoutingProps, 'route'> = (state) => ({\n    route: state.routing.route\n});\n\n\nconst RoutingComponent: React.FC<IRoutingProps> = ({ route }) => {\n    switch (route) {\n        case app.ROUTE_STATES.QUEST:\n            return <Quest/>\n        case app.ROUTE_STATES.ADMIN_QUESTIONS_LIST:\n            return <QuestionsManagement/>;\n        case app.ROUTE_STATES.ADMIN_MAIN:\n            return <AdminMenu/>;\n        case app.ROUTE_STATES.MAIN:\n        default:\n            return <Landing/>;\n    }\n};\n\n\nexport const Routing = connect(mapStateToProps)(RoutingComponent);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { AppHeader } from '../AppHeader/AppHeader';\nimport { IMapStateToProps } from '../../redux/connect';\nimport { Routing } from './../Routing/Routing';\nimport { ROUTE_STATES } from '../../app';\nimport classnames from 'classnames';\n\n\ninterface IAppProps {\n    route?: ROUTE_STATES,\n}\n\n\nconst mapStateToProps: IMapStateToProps<IAppProps, 'route'> = (state) => ({\n    route: state.routing.route,\n});\n\n\nconst AppComponent: React.FC<IAppProps> = ({ route }) => {\n    const conditionalClasses = {\n        '_header_small': route !== ROUTE_STATES.MAIN,\n        '_quest-in-progress': route === ROUTE_STATES.QUEST,\n    };\n\n    return (\n        <div className={classnames('App', conditionalClasses)}>\n            <div className=\"App__container\">\n                <AppHeader className=\"App__header\"/>\n                <Routing/>\n            </div>\n        </div>\n    );\n};\n\n\nexport const App = connect(mapStateToProps)(AppComponent);\n","import { combineReducers } from 'redux';\nimport { IAppState } from './state';\nimport { fullScreenReducer } from './full-screen/full-screen-reducer';\nimport { routingReducer } from './routing/routing-reducer';\nimport { questionsReducer } from './questions/questions-reducer';\nimport { usersReducer } from './users/users-reducer';\n\n\nexport const rootReducer = combineReducers<IAppState>({\n    fullScreen: fullScreenReducer,\n    routing: routingReducer,\n    questions: questionsReducer,\n    users: usersReducer,\n});\n","import { fullScreenInitialState, IFullScreenState } from './full-screen/full-screen-state';\nimport { routeInitialState, IRoutingState } from './routing/routing-state';\nimport { questionsInitialState, IQuestionsState } from './questions/questions-state';\nimport { usersInitialState, IUsersState } from './users/users-state';\n\n\nexport interface IAppState {\n    fullScreen: IFullScreenState,\n    routing: IRoutingState,\n    questions: IQuestionsState,\n    users: IUsersState,\n};\n\n\nexport const initialState: IAppState = {\n    fullScreen: fullScreenInitialState,\n    routing: routeInitialState,\n    questions: questionsInitialState,\n    users: usersInitialState,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App/App';\nimport { Provider } from 'react-redux'\nimport { configureStore, IAppStore } from './redux/store';\nimport { app } from './app';\n\nconst store = configureStore() as IAppStore;\n\napp.setStore(store);\n\nconst appElement = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n);\n\nReactDOM.render(appElement, document.getElementById('root'));\n","import { createStore, Store, Action } from 'redux';\nimport { rootReducer } from './root-reducer';\nimport { initialState, IAppState } from './state';\n\n\nexport interface IAction<TPayload> extends Action<string> {\n    payload: TPayload;\n}\n\n\n// any type does not matter this case\nexport type IAppStore = Store<IAppState, IAction<any>>;\n\n\nexport function configureStore() {\n  return createStore(rootReducer, initialState);\n}\n"],"sourceRoot":""}